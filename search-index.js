var searchIndex = JSON.parse('{\
"fluent_uri":{"doc":"A URI parser that strictly adheres to IETF RFC 3986.","t":[3,4,13,13,13,13,13,3,4,3,13,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,4,4,13,13,3,3,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,4,13,13,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12],"n":["Authority","Host","InvalidIpLiteral","InvalidOctet","Ipv4","Ipv6","IpvFuture","ParseError","ParseErrorKind","Path","RegName","Scheme","UnexpectedChar","Uri","as_estr","as_str","as_str","as_str","as_str","authority","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","drop","dup","encoding","eq","eq","eq","eq_lowercase","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fragment","from","from","from","from","from","host","host_raw","index","into","into","into","into","into","into_string","is_absolute","is_absolute","is_relative","is_rootless","kind","mutable","ne","ne","parse","parse_from","parse_mut","path","port","port_raw","query","scheme","segments","take_authority","take_fragment","take_path","take_query","take_scheme","to_lowercase","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","userinfo","0","0","addr","addr","ver","zone_id","Decode","DecodeInPlace","Dst","Dst","EStr","Split","SplitMut","Src","Src","as_bytes","as_bytes","as_ref","as_ref","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","decode","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","hash","into","into","into","into","into_bytes","into_bytes","into_iter","into_iter","into_str","into_string","into_string_lossy","into_string_lossy","new","next","next","next_back","next_back","size_hint","size_hint","split","split_once","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","0","0","0","AuthorityMut","HostMut","Ipv4","Ipv6","IpvFuture","OnceMut","RegName","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","decode_in_place","deref","deref","drop","fmt","fmt","fmt","fmt","from","from","from","into","into","into","into_bytes","into_bytes","into_bytes","into_once_mut_estr","into_once_mut_str","into_ref","make_lowercase","segments_mut","split_mut","split_once_mut","take_host","take_host_raw","take_port","take_port_raw","take_userinfo","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","addr","addr","ver","zone_id"],"q":["fluent_uri","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fluent_uri::Host","","","","","","fluent_uri::encoding","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fluent_uri::encoding::Decode","","fluent_uri::encoding::DecodeInPlace","","fluent_uri::mutable","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fluent_uri::mutable::HostMut","","","","",""],"d":["The authority component of URI reference.","The host subcomponent of authority.","Invalid IP literal.","Invalid percent-encoded octet that is either …","An IPv4 address.","An IPv6 address.","An IP address of future version.","An error occurred when parsing URI references.","Detailed cause of a <code>ParseError</code>.","The path component of URI reference.","A registered name.","The scheme component of URI reference.","Unexpected character that is not allowed by the URI syntax.","A URI reference defined in RFC 3986.","Yields the underlying <code>EStr</code>.","Returns the URI reference as a string slice.","Returns the raw authority as a string slice.","Returns the raw scheme as a string slice.","Returns the path as a string slice.","Returns the authority component.","","Borrows this <code>Uri&lt;String&gt;</code> as a reference to <code>Uri&lt;&amp;str&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","Duplicates this <code>Uri&lt;&amp;str&gt;</code>.","Utilities for percent-encoding.","","","","Checks if the scheme equals case-insensitively with a …","","","","","","","","","","","","","","","","","","","","Returns the fragment component.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the parsed host subcomponent.","Returns the raw host subcomponent as a string slice.","Returns the index where the error occurred in the input …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>Uri</code> and yields the underlying <code>String</code> storage.","Returns <code>true</code> if the URI reference is absolute, i.e., with …","Returns <code>true</code> if the path is absolute, i.e., beginning with …","Returns <code>true</code> if the URI reference is relative, i.e., …","Returns <code>true</code> if the path is rootless, i.e., not beginning …","Returns the detailed cause of the error.","Mutable URI components that allow in-place …","","","Parses a URI reference from a byte sequence into a …","Parses a URI reference from a <code>String</code> or <code>Vec&lt;u8&gt;</code> into a …","Parses a URI reference from a mutable byte sequence into a …","Returns the path component.","Parses the port subcomponent as <code>u16</code>.","Returns the raw port subcomponent as a string slice.","Returns the query component.","Returns the scheme component.","Returns an iterator over the segments of the path.","Takes the mutable authority component, leaving a <code>None</code> in …","Takes the mutable fragment component, leaving a <code>None</code> in …","Takes the mutable path component.","Takes the mutable query component, leaving a <code>None</code> in its …","Takes the mutable scheme component, leaving a <code>None</code> in its …","Returns the scheme as a string in lower case.","","Creates a new <code>Uri&lt;String&gt;</code> by cloning the contents of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the userinfo subcomponent.","","","The address.","The address.","The version.","An optional zone identifier.","A wrapper of percent-decoded bytes.","A wrapper of in-place percent-decoded bytes.","One or more percent-encoded octets are decoded.","One or more percent-encoded octets are decoded.","Percent-encoded string slices.","An iterator over subslices of an <code>EStr</code> separated by a …","An iterator over mutable subslices of a <code>OnceMut&lt;EStr&gt;</code> …","No percent-encoded octets are decoded.","No percent-encoded octets are decoded.","Returns a reference to the decoded bytes.","Returns a reference to the decoded bytes.","","","Yields the underlying string slice.","","","","","","","","","","","Decodes the <code>EStr</code>.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>Decode</code> and yields the underlying decoded …","Consumes this <code>DecodeInPlace</code> and yields the underlying …","","","Converts the decoded bytes to a string slice.","Converts the decoded bytes to a string.","Converts the decoded bytes to a string lossily.","Converts the decoded bytes to a string lossily.","Converts a string slice to an <code>EStr</code>.","","","","","","","Returns an iterator over subslices separated by the given …","Splits the <code>EStr</code> on the first occurrence of the given …","","","","","","","","","","","","","","","","","","","A mutable authority component.","A mutable host subcomponent of authority.","An IPv4 address.","An IPv6 address.","An IP address of future version.","A wrapper around a mutable reference that may be mutably …","A registered name.","","","","","","","","Decodes the <code>OnceMut&lt;EStr&gt;</code> in-place.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>OnceMut&lt;str&gt;</code> and yields the underlying …","Consumes this <code>OnceMut&lt;Scheme&gt;</code> and yields the underlying …","Consumes this <code>OnceMut&lt;EStr&gt;</code> and yields the underlying …","Consumes this <code>OnceMut&lt;Path&gt;</code> and yields the underlying …","Consumes this <code>AuthorityMut</code> and yields the underlying …","Consumes this <code>OnceMut</code> and yields the underlying immutable …","Converts the scheme to lower case in-place.","Returns an iterator over the mutable segments of the path.","Returns an iterator over mutable subslices separated by …","Splits the <code>OnceMut&lt;EStr&gt;</code> on the first occurrence of the …","Takes the parsed mutable host subcomponent.","Takes the raw mutable host subcomponent.","Takes the parsed mutable port subcomponent, leaving a <code>None</code> …","Takes the raw mutable port subcomponent, leaving a <code>None</code> in …","Takes the mutable userinfo subcomponent, leaving a <code>None</code> in …","","","","","","","","","","","","","The address.","The address.","The version.","An optional zone identifier."],"i":[0,0,1,1,2,2,2,0,0,0,2,0,1,0,3,4,5,6,3,4,4,4,5,1,7,6,2,3,4,5,1,7,6,2,3,4,1,7,2,4,1,7,2,4,4,0,1,7,2,6,4,4,4,4,4,5,5,5,5,5,1,7,7,6,6,2,2,3,3,4,4,5,1,7,2,5,5,7,4,5,1,7,2,4,4,3,4,3,7,0,7,2,4,4,4,4,5,5,4,4,3,4,4,4,4,4,6,4,4,1,7,2,4,5,7,6,2,3,4,5,1,7,2,4,5,1,7,2,4,5,1,7,6,2,3,5,8,9,10,11,11,10,0,0,12,13,0,0,0,12,13,12,13,14,14,14,14,12,13,15,16,14,12,13,15,16,14,14,14,14,14,12,13,15,16,12,13,15,16,14,12,13,15,16,12,13,15,16,13,12,12,13,14,15,16,15,16,15,16,14,14,14,12,13,15,16,12,13,15,16,14,12,13,15,16,17,18,19,20,0,0,21,21,21,0,21,22,23,22,21,23,22,21,22,23,22,23,23,22,22,21,23,22,21,23,22,21,22,22,22,22,23,22,22,22,22,22,23,23,23,23,23,22,23,22,21,23,22,21,23,22,21,24,25,26,27,27,26],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["estr",3]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]],["option",4,[["authority",3]]]],[[["",0]],["",0]],[[["",0]],["uri",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["parseerrorkind",4]],[[["",0]],["parseerror",3]],[[["",0]],["host",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]]],[[["",0]],["uri",3,[["str",0]]]],null,[[["",0],["parseerrorkind",4]],["bool",0]],[[["",0],["parseerror",3]],["bool",0]],[[["",0],["host",4]],["bool",0]],[[["",0],["str",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0]],["option",4,[["estr",3]]]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["host",4]],[[["",0]],["str",0]],[[["",0]],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["parseerrorkind",4]],null,[[["",0],["parseerror",3]],["bool",0]],[[["",0],["host",4]],["bool",0]],[[["",0]],["result",4,[["uri",3,[["str",0]]],["parseerror",3]]]],[[["intoowneduri",8]],["result",4,[["uri",3,[["string",3]]]]]],[[["",0]],["result",4,[["uri",3],["parseerror",3]]]],[[["",0]],["path",3]],[[["",0]],["option",4,[["result",4,[["u16",0],["str",0]]]]]],[[["",0]],["option",4,[["str",0]]]],[[["",0]],["option",4,[["estr",3]]]],[[["",0]],["option",4,[["scheme",3]]]],[[["",0]],["split",3]],[[["",0]],["option",4,[["authoritymut",3]]]],[[["",0]],["option",4,[["oncemut",3,[["estr",3]]]]]],[[["",0]],["oncemut",3,[["path",3]]]],[[["",0]],["option",4,[["oncemut",3,[["estr",3]]]]]],[[["",0]],["option",4,[["oncemut",3,[["scheme",3]]]]]],[[["",0]],["string",3]],[[["",0]]],[[["",0]],["uri",3,[["string",3]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["option",4,[["estr",3]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["decode",4]],[[["",0],["str",0]],["bool",0]],[[["",0],["estr",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[],["cow",4]],[[]],[[]],[[]],[[],["result",4,[["str",0]]]],[[],["result",4,[["cow",4,[["str",0]]],["fromutf8error",3]]]],[[],["cow",4,[["str",0]]]],[[],["cow",4,[["str",0]]]],[[["str",0]],["estr",3]],[[["",0]],["option",4,[["estr",3]]]],[[["",0]],["option",4,[["oncemut",3,[["estr",3]]]]]],[[["",0]],["option",4,[["estr",3]]]],[[["",0]],["option",4,[["oncemut",3,[["estr",3]]]]]],[[["",0]]],[[["",0]]],[[["",0],["char",0]],["split",3]],[[["",0],["char",0]],["option",4]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["decodeinplace",4]],[[["",0]],["authority",3]],[[["",0]],["",0]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["oncemut",3,[["estr",3]]]],[[],["oncemut",3,[["str",0]]]],[[],["",0]],[[["",0]]],[[],["splitmut",3]],[[["char",0]],["splitmut",3]],[[["char",0]],["result",4]],[[["",0]],["hostmut",4]],[[["",0]],["oncemut",3,[["str",0]]]],[[["",0]],["option",4,[["result",4,[["u16",0],["oncemut",3,[["str",0]]]]]]]],[[["",0]],["option",4,[["oncemut",3,[["str",0]]]]]],[[["",0]],["option",4,[["oncemut",3,[["estr",3]]]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null],"p":[[4,"ParseErrorKind"],[4,"Host"],[3,"Path"],[3,"Uri"],[3,"Authority"],[3,"Scheme"],[3,"ParseError"],[13,"Ipv4"],[13,"RegName"],[13,"Ipv6"],[13,"IpvFuture"],[4,"Decode"],[4,"DecodeInPlace"],[3,"EStr"],[3,"Split"],[3,"SplitMut"],[13,"Src"],[13,"Dst"],[13,"Src"],[13,"Dst"],[4,"HostMut"],[3,"OnceMut"],[3,"AuthorityMut"],[13,"Ipv4"],[13,"RegName"],[13,"Ipv6"],[13,"IpvFuture"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};