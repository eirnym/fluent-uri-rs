var searchIndex = new Map(JSON.parse('[\
["fluent_uri",{"doc":"An RFC 3986 compliant generic URI parser and builder.","t":"FFFNNNNNNNNNNNNNNNNNNNNCNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFGPPPPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPGFFPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNKFFFFFTFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSSSSSSSSSSSSSSFSSNNNNNNNNNNNNNNNNNN","n":["Builder","ParseError","Uri","advance","as_ref","as_str","authority","authority","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","builder","clone","clone","clone_into","clone_into","cmp","component","default","encoding","eq","fmt","fmt","fmt","fmt","fragment","fragment","from","from","from","from","from_str","hash","host","host_port_from_socket_addr","into","into","into","into_input","into_string","is_absolute","is_relative","optional","parse","partial_cmp","path","path","plain","port","port_with_default","query","query","scheme","scheme","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","userinfo","Authority","Host","Ipv4","Ipv6","IpvFuture","RegName","Scheme","as_str","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","fmt","fmt","fmt","fmt","from","from","host","host_parsed","into","into","new","port","port_to_u16","to_owned","to_socket_addrs","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","type_id","userinfo","Borrowed","Decode","EStr","EString","Owned","Split","as_bytes","as_estr","as_ref","as_ref","as_ref","as_ref","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","decode","default","default","deref","encode","encoder","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","into","into","into","into_bytes","into_iter","into_string","into_string","into_string_lossy","is_absolute","is_empty","is_rootless","len","new","new","next","next_back","partial_cmp","partial_cmp","push_byte","push_estr","reserve","reserve_exact","segments","split","split_once","table","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_capacity","Encoder","Fragment","Path","PathSegment","Query","RegName","TABLE","Userinfo","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","from","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","ALPHA","DIGIT","FRAGMENT","GEN_DELIMS","HEXDIG","IPV_FUTURE","PATH","PCHAR","QUERY","REG_NAME","RESERVED","SCHEME","SEGMENT_NZ_NC","SUB_DELIMS","Table","UNRESERVED","USERINFO","allows","allows_enc","borrow","borrow_mut","clone","clone_into","enc","fmt","from","gen","into","is_subset","or","sub","to_owned","try_from","try_into","type_id"],"q":[[0,"fluent_uri"],[75,"fluent_uri::component"],[119,"fluent_uri::encoding"],[222,"fluent_uri::encoding::encoder"],[272,"fluent_uri::encoding::table"],[307,"core::ops::function"],[308,"core::option"],[309,"alloc::string"],[310,"core::clone"],[311,"core::cmp"],[312,"core::default"],[313,"core::fmt"],[314,"core::fmt"],[315,"core::hash"],[316,"core::net::socket_addr"],[317,"core::convert"],[318,"core::any"],[319,"core::num::error"],[320,"core::iter::traits::iterator"],[321,"std::io::error"],[322,"core::convert"],[323,"core::fmt"],[324,"alloc::string"]],"d":["A builder for URI reference.","An error occurred when parsing URI references.","A URI reference defined in RFC 3986.","Advances the builder state, skipping optional components …","","Returns the value of the URI reference as a string slice.","Builds the authority component with the given function.","Returns the authority component.","","","Borrows this <code>Uri&lt;String&gt;</code> as <code>Uri&lt;&amp;str&gt;</code>.","","","","","","Builds the URI reference.","Creates a new builder for URI reference.","","","","","","Components of URI reference.","","Utilities for percent-encoding.","","","","","","Sets the fragment component.","Returns the fragment component.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Sets the host subcomponent of authority.","Sets the host and the port subcomponent of authority to …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Recovers the input that were attempted to parse into a <code>Uri</code>.","Consumes this <code>Uri&lt;String&gt;</code> and yields the underlying <code>String</code>.","Checks whether the URI reference is absolute, i.e., with a …","Checks whether the URI reference is relative, i.e., …","Optionally calls a builder method with a value.","Parses a URI reference from a string into a <code>Uri</code>.","","Sets the path component.","Returns the path component.","Returns the error with input erased.","Sets the port subcomponent of authority.","Sets the port subcomponent of authority, omitting it when …","Sets the query component.","Returns the query component.","Sets the scheme component.","Returns the scheme component.","","","Creates a new <code>Uri&lt;String&gt;</code> by cloning the contents of this …","","","","","","","","","","","","Sets the userinfo subcomponent of authority.","The authority component of URI reference.","The parsed host component of URI reference.","An IPv4 address.","An IPv4 address.","An IP address of future version.","A registered name.","The scheme component of URI reference.","Returns the scheme as a string slice.","Returns the authority as a string slice.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the host subcomponent as a string slice.","Returns the parsed host subcomponent.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts a string slice to <code>&amp;Scheme</code>.","Returns the port subcomponent.","Converts the port subcomponent to <code>u16</code>.","","Converts the authority to an iterator of resolved …","","","","","","","","","","Returns the userinfo subcomponent.","No percent-encoded octets are decoded.","A wrapper of percent-decoded bytes.","Percent-encoded string slices.","A percent-encoded, growable string.","One or more percent-encoded octets are decoded.","An iterator over subslices of an <code>EStr</code> slice separated by a …","Returns a reference to the decoded bytes.","Coerces to an <code>EStr</code> slice.","","","","","Yields the underlying string slice.","","","","","","","","","","Invokes <code>capacity</code> on the underlying <code>String</code>.","Truncates this <code>EString</code> to zero length and casts to another …","","","","","","","","","","Decodes the <code>EStr</code> slice.","","Creates an empty <code>EStr</code> slice.","","Encodes a byte sequence with a sub-encoder and appends the …","Percent-encoders for URI components.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>Decode</code> and yields the underlying decoded …","","Consumes this <code>EString</code> and yields the underlying <code>String</code>.","Converts the decoded bytes to a string.","Converts the decoded bytes to a string, including invalid …","Checks whether the path is absolute, i.e., starting with …","Checks whether the <code>EStr</code> slice is empty.","Checks whether the path is rootless, i.e., not starting …","Returns the length of the <code>EStr</code> slice in bytes.","Creates a new empty <code>EString</code>.","Converts a string slice to an <code>EStr</code> slice.","","","","","Appends an unencoded byte onto the end of this <code>EString</code>.","Appends an <code>EStr</code> slice onto the end of this <code>EString</code>.","Invokes <code>reserve</code> on the underlying <code>String</code>.","Invokes <code>reserve_exact</code> on the underlying <code>String</code>.","Returns an iterator over the path segments.","Returns an iterator over subslices of the <code>EStr</code> slice …","Splits the <code>EStr</code> slice on the first occurrence of the given …","Byte pattern tables from RFC 3986.","","","","","","","","","","","","","","","","","Creates a new empty <code>EString</code> with a particular capacity.","A trait used by <code>EStr</code> and <code>EString</code> to specify the table used …","An encoder for fragment.","An encoder for path.","An encoder for path segment.","An encoder for query.","An encoder for registered name.","The table used for encoding.","An encoder for userinfo.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","<code>ALPHA = %x41-5A / %x61-7A</code>","<code>DIGIT = %x30-39</code>","<code>fragment = *( pchar / &quot;/&quot; / &quot;?&quot; )</code>","<code>gen-delims = &quot;:&quot; / &quot;/&quot; / &quot;?&quot; / &quot;#&quot; / &quot;[&quot; / &quot;]&quot; / &quot;@&quot;</code>","<code>HEXDIG = DIGIT / &quot;A&quot; / &quot;B&quot; / &quot;C&quot; / &quot;D&quot; / &quot;E&quot; / &quot;F&quot;</code>","…","<code>path = *( pchar / &quot;/&quot; )</code>","<code>pchar = unreserved / pct-encoded / sub-delims / &quot;:&quot; / &quot;@&quot;</code>","<code>query = *( pchar / &quot;/&quot; / &quot;?&quot; )</code>","<code>reg-name = *( unreserved / pct-encoded / sub-delims )</code>","<code>reserved = gen-delims / sub-delims</code>","<code>scheme = ALPHA *( ALPHA / DIGIT / &quot;+&quot; / &quot;-&quot; / &quot;.&quot; )</code>","…","…","A table determining the byte patterns allowed in a string.","<code>unreserved = ALPHA / DIGIT / &quot;-&quot; / &quot;.&quot; / &quot;_&quot; / &quot;~&quot;</code>","<code>userinfo = *( unreserved / pct-encoded / sub-delims / &quot;:&quot; )</code>","Checks whether the given unencoded byte is allowed by the …","Checks whether percent-encoded octets are allowed by the …","","","","","Marks this table as allowing percent-encoded octets.","","Returns the argument unchanged.","Generates a table that only allows the given unencoded …","Calls <code>U::from(self)</code>.","Checks whether the table is a subset of another, i.e., …","Combines two tables into one.","Subtracts from this table.","","","",""],"i":[0,0,0,1,2,2,1,2,1,9,2,2,2,1,9,2,1,2,9,2,9,2,2,0,2,0,2,9,9,2,2,1,2,1,9,2,2,2,2,1,1,1,9,2,9,2,2,2,1,2,2,1,2,9,1,1,1,2,1,2,9,2,2,9,2,1,9,2,1,9,2,1,9,2,1,0,0,21,21,21,21,0,28,6,28,6,21,28,6,21,21,21,21,28,28,6,6,21,6,21,6,6,6,21,28,6,6,21,6,28,6,6,21,6,21,28,6,21,6,35,0,0,0,35,0,35,38,38,38,18,18,18,38,38,18,35,41,38,18,35,41,38,38,38,35,41,38,18,35,41,38,18,18,38,18,38,38,0,38,38,38,38,38,18,18,18,18,38,38,18,18,35,41,38,38,35,41,38,18,38,35,41,35,41,38,35,35,18,18,18,18,38,18,41,41,38,18,38,38,38,38,18,18,18,0,38,18,35,41,38,18,38,35,41,38,35,41,38,18,35,41,38,0,0,0,0,0,0,39,0,30,51,26,47,27,17,30,51,26,47,27,17,30,51,26,47,27,17,30,51,26,47,27,17,30,51,26,47,27,17,30,51,26,47,27,17,30,51,26,47,27,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50],"f":"```{{{b{e}}}{{b{c}}}`{{`{c}}}}{{{d{c}}}f`}0{{{b{c}}g}{{b{`}}}{{`{`}}}{{`{`}}}{{j{{b{`}}}{{h{{b{e}}}}}}}}{{{d{c}}}{{n{{l{c}}}}}`}{ce{}{}}0{{{d{A`}}}{{d{f}}}}14111{{{b{c}}}{{d{A`}}}{{`{`}}}}{{}b}{{{Ab{c}}}{{Ab{c}}}Ad}{{{d{c}}}{{d{c}}}Ad}{{ce}Af{}{}}0{{{d{c}}{d{c}}}Ah`}`{{}{{d{c}}}{`Aj}}`{{{d{c}}{d{e}}}Al``}{{{Ab{c}}An}B`{}}0{{{d{c}}An}B``}0{{{b{c}}{Bd{Bb}}}{{b{`}}}{{`{`}}}}{{{d{c}}}{{n{{Bd{Bb}}}}}`}{cc{}}00{{{d{f}}}{{d{A`}}}}{f{{Bf{{d{A`}}c}}}{}}{{{d{c}}e}Af`Bh}{{{b{c}}Bj}{{b{`}}}{{`{`}}}}{{{b{c}}eBl}{{b{`}}}{{`{`}}}{{C`{Bn}}}}{ce{}{}}00{{{Ab{A`}}}A`}{{{d{A`}}}A`}{{{d{c}}}Al`}0{{{b{e}}i{n{g}}}{{b{c}}}`{{`{c}}}{}{{j{{b{e}}g}{{h{{b{c}}}}}}}}{e{{Bf{d}}}{}{{`{}{{Cb{c}}}}}}{{{d{c}}{d{c}}}{{n{Ah}}}`}{{{b{c}}{Bd{Cd}}}{{b{`}}}{{`{`}}}}{{{d{c}}}{{Bd{Cd}}}`}{{{Ab{A`}}}Ab}{{{b{c}}e}{{b{`}}}{{`{`}}}`}{{{b{c}}BlBl}{{b{`}}}{{`{`}}}}{{{b{c}}{Bd{Cf}}}{{b{`}}}{{`{`}}}}{{{d{c}}}{{n{{Bd{Cf}}}}}`}{{{b{c}}Ch}{{b{`}}}{{`{`}}}}{{{d{c}}}{{n{Ch}}}`}??{{{d{f}}}{{d{A`}}}}{cA`{}}0{c{{Bf{e}}}{}{}}00000{cCj{}}00{{{b{c}}{Bd{Cl}}}{{b{`}}}{{`{`}}}}```````{Chf}{{{l{c}}}f`}{ce{}{}}00000{BjBj}{{ce}Af{}{}}{{BjBj}Al}{{ChAn}B`}0{{{l{c}}An}B``}0{{BjAn}B`}{cc{}}08{{{l{c}}}Bj`}88{fCh}{{{l{c}}}{{n{f}}}`}{{{l{c}}}{{Bf{{n{Bl}}Cn}}}`};{{{l{c}}Bl}{{Dd{{`{{Db{}{{D`{Bn}}}}}}}}}`}{cA`{}}0{c{{Bf{e}}}{}{}}000{cCj{}}00{{{l{c}}}{{n{{Bd{Cl}}}}}`}``````{Df{{Dj{Dh}}}}{{{Dl{c}}}{{Bd{c}}}Dn}{{{Dl{c}}}fDn}1{{{Bd{c}}}{{Bd{c}}}Dn}{{{Bd{c}}}fDn}03{ce{}{}}0000000{{{Dl{c}}}E`Dn}{{{Dl{c}}}{{Dl{e}}}DnDn}{{{Dl{c}}}{{Dl{c}}}{AdDn}}{DfDf}{{{Eb{c}}}{{Eb{c}}}{AdDn}}{{ce}Af{}{}}{{{Bd{c}}{Dl{c}}}AfDn}11{{{Dl{c}}{Dl{c}}}AhDn}{{{Bd{c}}{Bd{c}}}AhDn}{{{Bd{c}}}DfDn}{{}{{Dl{c}}}{AjDn}}{{}{{Bd{c}}}Dn}{{{Dl{c}}}{{Bd{c}}}Dn}{{{Dl{c}}e}AfDn{{Ed{{Dj{Dh}}}}Ef}}`{{{Dl{c}}f}AlDn}{{{Dl{c}}{Bd{e}}}AlDnDn}1{{{Dl{c}}{Dl{e}}}AlDnDn}1{{{Bd{c}}{Dl{e}}}AlDnDn}{{{Bd{c}}f}AlDn}{{{Bd{c}}{Bd{e}}}AlDnDn}2{{{Dl{c}}An}B`Dn}0{{{Bd{c}}An}B`Dn}0{{DfAn}B`}{{{Eb{c}}An}B`{EhDn}}{{{Bd{c}}}{{Dl{c}}}Dn}{cc{}}00{{{Dl{c}}e}AfDnBh}{{{Bd{c}}e}AfDnBh}{ce{}{}}00{Df{{Ej{{Dj{Dh}}}}}}1{{{Dl{c}}}A`Dn}{Df{{Bf{{Ej{f}}El}}}}{Df{{Ej{f}}}}{{{Bd{Cd}}}Al}{{{Bd{c}}}AlDn}1{{{Bd{c}}}E`Dn}{{}{{Dl{c}}}Dn}{f{{Bd{c}}}Dn}{{{Eb{c}}}{{n{{Bd{c}}}}}Dn}0{{{Dl{c}}{Dl{c}}}{{n{Ah}}}Dn}{{{Bd{c}}{Bd{c}}}{{n{Ah}}}Dn}{{{Dl{c}}Dh}AfDn}{{{Dl{c}}{Bd{e}}}AfDnDn}{{{Dl{c}}E`}AfDn}0{{{Bd{Cd}}}{{Eb{En}}}}{{{Bd{c}}F`}{{Eb{c}}}Dn}{{{Bd{c}}F`}{{n{{Fb{{Bd{c}}{Bd{c}}}}}}}Dn}`{ce{}{}}{{{Bd{c}}}{{Dl{c}}}Dn}11{cA`{}}0{c{{Bf{e}}}{}{}}00000{cCj{}}000{E`{{Dl{c}}}Dn}````````555555555555{cc{}}00000666666333333333333222222`````````````````{{FdDh}Al}{FdAl}88{FdFd}{{ce}Af{}{}}1{{FdAn}B`}5{{{Dj{Dh}}}Fd}<{{FdFd}Al}{{FdFd}Fd}0>;;:","c":[],"p":[[5,"Builder",0],[5,"Uri",0],[1,"str"],[17,"Output"],[10,"FnOnce",307],[5,"Authority",75],[6,"Option",308],[5,"String",309],[5,"ParseError",0],[10,"Clone",310],[1,"unit"],[6,"Ordering",311],[10,"Default",312],[1,"bool"],[5,"Formatter",313],[8,"Result",313],[5,"Fragment",222],[5,"EStr",119],[6,"Result",314],[10,"Hasher",315],[6,"Host",75],[1,"u16"],[6,"SocketAddr",316],[10,"Into",317],[17,"Data"],[5,"Path",222],[5,"Query",222],[5,"Scheme",75],[5,"TypeId",318],[5,"Userinfo",222],[5,"ParseIntError",319],[17,"Item"],[10,"Iterator",320],[8,"Result",321],[6,"Decode",119],[1,"u8"],[1,"slice"],[5,"EString",119],[10,"Encoder",222],[1,"usize"],[5,"Split",119],[10,"AsRef",317],[10,"Sized",322],[10,"Debug",313],[6,"Cow",323],[5,"FromUtf8Error",309],[5,"PathSegment",222],[1,"char"],[1,"tuple"],[5,"Table",272],[5,"RegName",222]],"b":[[10,"impl-Uri%3CString%3E"],[12,"impl-Borrow%3Cstr%3E-for-Uri%3CT%3E"],[27,"impl-Debug-for-ParseError%3CI%3E"],[28,"impl-Display-for-ParseError%3CI%3E"],[29,"impl-Debug-for-Uri%3CT%3E"],[30,"impl-Display-for-Uri%3CT%3E"],[93,"impl-Display-for-Scheme"],[94,"impl-Debug-for-Scheme"],[95,"impl-Debug-for-Authority%3CT%3E"],[96,"impl-Display-for-Authority%3CT%3E"],[127,"impl-AsRef%3Cstr%3E-for-EString%3CE%3E"],[128,"impl-AsRef%3CEStr%3CE%3E%3E-for-EString%3CE%3E"],[129,"impl-AsRef%3CEStr%3CE%3E%3E-for-EStr%3CE%3E"],[130,"impl-AsRef%3Cstr%3E-for-EStr%3CE%3E"],[158,"impl-PartialEq%3C%26str%3E-for-EString%3CE%3E"],[159,"impl-PartialEq%3C%26EStr%3CF%3E%3E-for-EString%3CE%3E"],[160,"impl-PartialEq%3Cstr%3E-for-EString%3CE%3E"],[161,"impl-PartialEq%3CEString%3CF%3E%3E-for-EString%3CE%3E"],[162,"impl-PartialEq%3CEStr%3CF%3E%3E-for-EString%3CE%3E"],[163,"impl-PartialEq%3CEString%3CE%3E%3E-for-%26EStr%3CF%3E"],[164,"impl-PartialEq%3Cstr%3E-for-EStr%3CE%3E"],[165,"impl-PartialEq%3CEStr%3CF%3E%3E-for-EStr%3CE%3E"],[166,"impl-PartialEq%3CEString%3CE%3E%3E-for-EStr%3CF%3E"],[167,"impl-Display-for-EString%3CE%3E"],[168,"impl-Debug-for-EString%3CE%3E"],[169,"impl-Display-for-EStr%3CE%3E"],[170,"impl-Debug-for-EStr%3CE%3E"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
