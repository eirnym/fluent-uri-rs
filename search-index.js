var searchIndex = new Map(JSON.parse('[\
["borrow_or_share",{"doc":"Traits for either borrowing or sharing data.","t":"KKRMM","n":["BorrowOrShare","Bos","Ref","borrow_or_share","borrow_or_share"],"q":[[0,"borrow_or_share"],[5,"core::marker"]],"d":["A helper trait for writing “data borrowing or sharing” …","A trait for either borrowing or sharing data.","The resulting reference type. May only be <code>&amp;T</code>.","Borrows from <code>*this</code> or from behind a reference it holds, …","Borrows from <code>*self</code> or from behind a reference it holds."],"i":[0,0,2,2,4],"f":"```{{{d{}{{b{c}}}}}c{{`{e}}}f}{hcf}","c":[],"p":[[17,"Ref"],[10,"Bos",0],[10,"Sized",5],[10,"BorrowOrShare",0]],"b":[]}],\
["fluent_uri",{"doc":"A fast, easy generic URI parser and builder compliant with …","t":"FFFNNNNNNNNNNNNNNNNNNNNCNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFGPPPPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPGFFPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNFKFFFFTFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSSSSSSSSSSSSSSFSSNNNNNNNNNNNNNNNNNN","n":["Builder","ParseError","Uri","advance","as_ref","as_str","authority","authority","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","builder","clone","clone","clone_into","clone_into","cmp","component","default","encoding","eq","fmt","fmt","fmt","fmt","fragment","fragment","from","from","from","from","from_str","hash","host","host_port_from_socket_addr","into","into","into","into_input","into_string","is_absolute_uri","is_relative_reference","optional","parse","partial_cmp","path","path","plain","port","port_with_default","query","query","scheme","scheme","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","userinfo","Authority","Host","Ipv4","Ipv6","IpvFuture","RegName","Scheme","as_str","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","fmt","fmt","fmt","fmt","from","from","host","host_parsed","into","into","new","port","port_to_u16","to_owned","to_socket_addrs","to_string","to_string","try_from","try_from","try_into","try_into","try_new","type_id","type_id","type_id","userinfo","Borrowed","Decode","EStr","EString","Owned","Split","as_bytes","as_estr","as_ref","as_ref","as_ref","as_ref","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","decode","default","default","deref","encode","encoder","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","into","into","into","into_bytes","into_iter","into_string","into_string","into_string_lossy","is_absolute","is_empty","is_rootless","len","new","new","next","next_back","partial_cmp","partial_cmp","push_byte","push_estr","reserve","reserve_exact","rsplit_once","split","split_once","table","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","with_capacity","Data","Encoder","Fragment","Path","Query","RegName","TABLE","Userinfo","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","from","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","ALPHA","DIGIT","FRAGMENT","GEN_DELIMS","HEXDIG","IPV_FUTURE","PATH","PCHAR","QUERY","REG_NAME","RESERVED","SCHEME","SEGMENT_NZ_NC","SUB_DELIMS","Table","UNRESERVED","USERINFO","allows","allows_enc","borrow","borrow_mut","clone","clone_into","enc","fmt","from","gen","into","is_subset","or","sub","to_owned","try_from","try_into","type_id"],"q":[[0,"fluent_uri"],[75,"fluent_uri::component"],[120,"fluent_uri::encoding"],[224,"fluent_uri::encoding::encoder"],[274,"fluent_uri::encoding::table"],[309,"borrow_or_share"],[310,"borrow_or_share"],[311,"core::option"],[312,"alloc::string"],[313,"core::clone"],[314,"core::cmp"],[315,"core::fmt"],[316,"core::fmt"],[317,"core::hash"],[318,"core::net::socket_addr"],[319,"core::convert"],[320,"core::any"],[321,"core::num::error"],[322,"core::iter::traits::iterator"],[323,"std::io::error"],[324,"core::default"],[325,"core::convert"],[326,"core::fmt"],[327,"alloc::string"]],"d":["A builder for URI reference.","An error occurred when parsing URI references.","A URI reference defined in RFC 3986.","Advances the builder state, skipping optional components …","","Returns the URI reference as a string slice.","Builds the authority component with the given function.","Returns the authority component.","","","Borrows this <code>Uri&lt;String&gt;</code> as <code>Uri&lt;&amp;str&gt;</code>.","","","","","","Builds the URI reference.","Creates a new builder for URI reference.","","","","","","Components of URI reference.","Creates an empty URI reference.","Utilities for percent-encoding.","","","","","","Sets the fragment component.","Returns the fragment component.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Sets the host subcomponent of authority.","Sets the host and the port subcomponent of authority to …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Recovers the input that was attempted to parse into a <code>Uri</code>.","Consumes this <code>Uri&lt;String&gt;</code> and yields the underlying <code>String</code>.","Checks whether the URI reference is an absolute URI, i.e., …","Checks whether the URI reference is a relative reference, …","Optionally calls a builder method with a value.","Parses a URI reference from a string into a <code>Uri</code>.","","Sets the path component.","Returns the path component.","Returns the error with input erased.","Sets the port subcomponent of authority.","Sets the port subcomponent of authority, omitting it when …","Sets the query component.","Returns the query component.","Sets the scheme component.","Returns the scheme component.","","","Creates a new <code>Uri&lt;String&gt;</code> by cloning the contents of this …","","","","","","","","","","","","Sets the userinfo subcomponent of authority.","The authority component of URI reference.","The parsed host component of URI reference.","An IPv4 address.","An IPv6 address.","An IP address of future version.","A registered name.","The scheme component of URI reference.","Returns the scheme as a string slice.","Returns the authority as a string slice.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the host subcomponent as a string slice.","Returns the parsed host subcomponent.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts a string slice to <code>&amp;Scheme</code>.","Returns the port subcomponent.","Converts the port subcomponent to <code>u16</code>.","","Converts the authority to an iterator of resolved …","","","","","","","Converts a string slice to <code>&amp;Scheme</code>, returning <code>None</code> if the …","","","","Returns the userinfo subcomponent.","No percent-encoded octets are decoded.","A wrapper of percent-decoded bytes.","Percent-encoded string slices.","A percent-encoded, growable string.","One or more percent-encoded octets are decoded.","An iterator over subslices of an <code>EStr</code> slice separated by a …","Returns a reference to the decoded bytes.","Coerces to an <code>EStr</code> slice.","","","","","Yields the underlying string slice.","","","","","","","","","","Invokes <code>capacity</code> on the underlying <code>String</code>.","Truncates this <code>EString</code> to zero length and casts it to …","","","","","","","","","","Decodes the <code>EStr</code> slice.","","Creates an empty <code>EStr</code> slice.","","Encodes a byte sequence with a sub-encoder and appends the …","Percent-encoders for URI components.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>Decode</code> and yields the underlying decoded …","","Consumes this <code>EString</code> and yields the underlying <code>String</code>.","Converts the decoded bytes to a string.","Converts the decoded bytes to a string, including invalid …","Checks whether the path is absolute, i.e., starting with …","Checks whether the <code>EStr</code> slice is empty.","Checks whether the path is rootless, i.e., not starting …","Returns the length of the <code>EStr</code> slice in bytes.","Creates a new empty <code>EString</code>.","Converts a string slice to an <code>EStr</code> slice.","","","","","Appends an unencoded byte onto the end of this <code>EString</code>.","Appends an <code>EStr</code> slice onto the end of this <code>EString</code>.","Invokes <code>reserve</code> on the underlying <code>String</code>.","Invokes <code>reserve_exact</code> on the underlying <code>String</code>.","Splits the <code>EStr</code> slice on the last occurrence of the given …","Returns an iterator over subslices of the <code>EStr</code> slice …","Splits the <code>EStr</code> slice on the first occurrence of the given …","Byte pattern tables from RFC 3986.","","","","","","","","","","","","","Converts a string slice to an <code>EStr</code> slice, returning <code>None</code> …","","","","","Creates a new empty <code>EString</code> with a particular capacity.","An encoder suitable for encoding any data without …","A trait used by <code>EStr</code> and <code>EString</code> to specify the table used …","An encoder for fragment.","An encoder for path.","An encoder for query.","An encoder for registered name.","The table used for encoding.","An encoder for userinfo.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","<code>ALPHA = %x41-5A / %x61-7A</code>","<code>DIGIT = %x30-39</code>","<code>fragment = *( pchar / &quot;/&quot; / &quot;?&quot; )</code>","<code>gen-delims = &quot;:&quot; / &quot;/&quot; / &quot;?&quot; / &quot;#&quot; / &quot;[&quot; / &quot;]&quot; / &quot;@&quot;</code>","<code>HEXDIG = DIGIT / &quot;A&quot; / &quot;B&quot; / &quot;C&quot; / &quot;D&quot; / &quot;E&quot; / &quot;F&quot;</code>","…","<code>path = *( pchar / &quot;/&quot; )</code>","<code>pchar = unreserved / pct-encoded / sub-delims / &quot;:&quot; / &quot;@&quot;</code>","<code>query = *( pchar / &quot;/&quot; / &quot;?&quot; )</code>","<code>reg-name = *( unreserved / pct-encoded / sub-delims )</code>","<code>reserved = gen-delims / sub-delims</code>","<code>scheme = ALPHA *( ALPHA / DIGIT / &quot;+&quot; / &quot;-&quot; / &quot;.&quot; )</code>","…","…","A table determining the byte patterns allowed in a string.","<code>unreserved = ALPHA / DIGIT / &quot;-&quot; / &quot;.&quot; / &quot;_&quot; / &quot;~&quot;</code>","<code>userinfo = *( unreserved / pct-encoded / sub-delims / &quot;:&quot; )</code>","Checks whether the given unencoded byte is allowed by the …","Checks whether percent-encoded octets are allowed by the …","","","","","Marks this table as allowing percent-encoded octets.","","Returns the argument unchanged.","Generates a table that only allows the given unencoded …","Calls <code>U::from(self)</code>.","Checks whether the table is a subset of another, i.e., …","Combines two tables into one.","Subtracts from this table.","","","",""],"i":[0,0,0,1,2,2,1,2,1,11,2,2,2,1,11,2,1,2,11,2,11,2,2,0,2,0,2,11,11,2,2,1,2,1,11,2,2,2,2,1,1,1,11,2,11,2,2,2,1,2,2,1,2,11,1,1,1,2,1,2,11,2,2,11,2,1,11,2,1,11,2,1,11,2,1,0,0,22,22,22,22,0,29,8,29,8,22,29,8,22,22,22,22,29,29,8,8,22,8,22,8,8,8,22,29,8,8,22,8,29,8,8,22,8,22,29,29,8,22,8,36,0,0,0,36,0,36,39,39,39,19,19,19,39,39,19,36,42,39,19,36,42,39,39,39,36,42,39,19,36,42,39,19,19,39,19,39,39,0,39,39,39,39,39,19,19,19,19,39,39,19,19,36,42,39,39,36,42,39,19,39,36,42,36,42,39,36,36,19,19,19,19,39,19,42,42,39,19,39,39,39,39,19,19,19,0,39,19,36,42,39,19,39,36,42,39,36,42,19,39,19,36,42,39,0,0,0,0,0,0,40,0,31,52,27,28,18,53,31,52,27,28,18,53,31,52,27,28,18,53,31,52,27,28,18,53,31,52,27,28,18,53,31,52,27,28,18,53,31,52,27,28,18,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51],"f":"```{{{b{e}}}{{b{c}}}`{{`{c}}}}{{{d{c}}}f{{h{f}}}}{{{d{c}}}f{{j{f}}}}{{{b{c}}g}{{b{`}}}{{`{`}}}{{`{`}}}{{n{{b{`}}}{{l{{b{e}}}}}}}}{{{d{c}}}{{Ab{{A`{c}}}}}{{j{f}}}}{ce{}{}}0{{{d{Ad}}}{{d{f}}}}15111{{{b{c}}}{{d{Ad}}}{{`{`}}}}{{}b}{{{Af{c}}}{{Af{c}}}Ah}{{{d{c}}}{{d{c}}}Ah}{{ce}Aj{}{}}0{{{d{c}}{d{c}}}Al{{h{f}}}}`{{}{{d{c}}}`}`{{{d{c}}{d{e}}}An{{h{f}}}{{h{f}}}}{{{Af{c}}B`}Bb{}}0{{{d{c}}B`}Bb{{h{f}}}}0{{{b{c}}{Bf{Bd}}}{{b{`}}}{{`{`}}}}{{{d{c}}}{{Ab{{Bf{Bd}}}}}{{j{f}}}}{cc{}}00{{{d{f}}}{{d{Ad}}}}{f{{Bh{{d{Ad}}c}}}{}}{{{d{c}}e}Aj{{h{f}}}Bj}{{{b{c}}Bl}{{b{`}}}{{`{`}}}}{{{b{c}}eBn}{{b{`}}}{{`{`}}}{{Cb{C`}}}}{ce{}{}}00{{{Af{c}}}c`}{{{d{Ad}}}Ad}{{{d{c}}}An{{j{f}}}}0{{{b{e}}i{Ab{g}}}{{b{c}}}`{{`{c}}}{}{{n{{b{e}}g}{{l{{b{c}}}}}}}}{e{{Bh{{d{c}}}}}{}{{`{}{{Cd{c}}}}}}{{{d{c}}{d{c}}}{{Ab{Al}}}{{h{f}}}}{{{b{c}}{Bf{Cf}}}{{b{`}}}{{`{`}}}}{{{d{c}}}{{Bf{Cf}}}{{j{f}}}}{{{Af{c}}}Af`}{{{b{c}}e}{{b{`}}}{{`{`}}}`}{{{b{c}}BnBn}{{b{`}}}{{`{`}}}}{{{b{c}}{Bf{Ch}}}{{b{`}}}{{`{`}}}}{{{d{c}}}{{Ab{{Bf{Ch}}}}}{{j{f}}}}{{{b{c}}Cj}{{b{`}}}{{`{`}}}}{{{d{c}}}{{Ab{Cj}}}{{j{f}}}}??{{{d{f}}}{{d{Ad}}}}{cAd{}}0{c{{Bh{e}}}{}{}}00000{cCl{}}00{{{b{c}}{Bf{Cn}}}{{b{`}}}{{`{`}}}}```````{Cjf}{{{A`{c}}}f{{j{f}}}}{ce{}{}}00000{BlBl}{{ce}Aj{}{}}{{BlBl}An}{{CjB`}Bb}0{{{A`{c}}B`}Bb{{h{f}}}}0{{BlB`}Bb}{cc{}}08{{{A`{c}}}Bl{{j{f}}}}88{fCj}{{{A`{c}}}{{Ab{f}}}{{j{f}}}}{{{A`{c}}}{{Bh{{Ab{Bn}}D`}}}{{j{f}}}};{{{A`{c}}Bn}{{Df{{`{{Dd{}{{Db{C`}}}}}}}}}{{j{f}}}}{cAd{}}0{c{{Bh{e}}}{}{}}000{f{{Ab{Cj}}}}{cCl{}}00{{{A`{c}}}{{Ab{{Bf{Cn}}}}}{{j{f}}}}``````{Dh{{Dl{Dj}}}}{{{Dn{c}}}{{Bf{c}}}E`}0{{{Dn{c}}}fE`}{{{Bf{c}}}{{Bf{c}}}E`}{{{Bf{c}}}fE`}0{ce{}{}}40000000{{{Dn{c}}}EbE`}{{{Dn{c}}}{{Dn{e}}}E`E`}{{{Dn{c}}}{{Dn{c}}}{AhE`}}{DhDh}{{{Ed{c}}}{{Ed{c}}}{AhE`}}{{ce}Aj{}{}}{{{Bf{c}}{Dn{c}}}AjE`}11{{{Dn{c}}{Dn{c}}}AlE`}{{{Bf{c}}{Bf{c}}}AlE`}{{{Bf{c}}}DhE`}{{}{{Dn{c}}}{EfE`}}{{}{{Bf{c}}}E`}{{{Dn{c}}}{{Bf{c}}}E`}{{{Dn{c}}e}AjE`{{Eh{{Dl{Dj}}}}Ej}}`{{{Dn{c}}{Bf{c}}}AnE`}{{{Dn{c}}f}AnE`}0{{{Dn{c}}{Dn{c}}}AnE`}2{{{Bf{c}}{Bf{c}}}AnE`}{{{Bf{c}}{Dn{c}}}AnE`}0{{{Bf{c}}f}AnE`}{{{Dn{c}}B`}BbE`}0{{{Bf{c}}B`}BbE`}0{{DhB`}Bb}{{{Ed{c}}B`}Bb{ElE`}}{{{Bf{c}}}{{Dn{c}}}E`}{cc{}}00{{{Dn{c}}e}AjE`Bj}{{{Bf{c}}e}AjE`Bj}{ce{}{}}00{Dh{{En{{Dl{Dj}}}}}}1{{{Dn{c}}}AdE`}{Dh{{Bh{{En{f}}F`}}}}{Dh{{En{f}}}}{{{Bf{Cf}}}An}{{{Bf{c}}}AnE`}1{{{Bf{c}}}EbE`}{{}{{Dn{c}}}E`}{f{{Bf{c}}}E`}{{{Ed{c}}}{{Ab{{Bf{c}}}}}E`}0{{{Dn{c}}{Dn{c}}}{{Ab{Al}}}E`}{{{Bf{c}}{Bf{c}}}{{Ab{Al}}}E`}{{{Dn{c}}Dj}AjE`}{{{Dn{c}}{Bf{c}}}AjE`}{{{Dn{c}}Eb}AjE`}0{{{Bf{c}}Fb}{{Ab{{Fd{{Bf{c}}{Bf{c}}}}}}}E`}{{{Bf{c}}Fb}{{Ed{c}}}E`}1`{ce{}{}}{{{Bf{c}}}{{Dn{c}}}E`}11{cAd{}}0{c{{Bh{e}}}{}{}}00000{f{{Ab{{Bf{c}}}}}E`}{cCl{}}000{Eb{{Dn{c}}}E`}````````666666666666{cc{}}00000777777444444444444222222`````````````````{{FfDj}An}{FfAn}99{FfFf}{{ce}Aj{}{}}1{{FfB`}Bb}5{{{Dl{Dj}}}Ff}={{FfFf}An}{{FfFf}Ff}0?<<:","c":[],"p":[[5,"Builder",0],[5,"Uri",0],[1,"str"],[10,"Bos",309],[10,"BorrowOrShare",309],[17,"Output"],[10,"FnOnce",310],[5,"Authority",75],[6,"Option",311],[5,"String",312],[5,"ParseError",0],[10,"Clone",313],[1,"unit"],[6,"Ordering",314],[1,"bool"],[5,"Formatter",315],[8,"Result",315],[5,"Fragment",224],[5,"EStr",120],[6,"Result",316],[10,"Hasher",317],[6,"Host",75],[1,"u16"],[6,"SocketAddr",318],[10,"Into",319],[17,"Val"],[5,"Path",224],[5,"Query",224],[5,"Scheme",75],[5,"TypeId",320],[5,"Userinfo",224],[5,"ParseIntError",321],[17,"Item"],[10,"Iterator",322],[8,"Result",323],[6,"Decode",120],[1,"u8"],[1,"slice"],[5,"EString",120],[10,"Encoder",224],[1,"usize"],[5,"Split",120],[10,"Default",324],[10,"AsRef",319],[10,"Sized",325],[10,"Debug",315],[6,"Cow",326],[5,"FromUtf8Error",312],[1,"char"],[1,"tuple"],[5,"Table",274],[5,"RegName",224],[5,"Data",224]],"b":[[10,"impl-Uri%3CString%3E"],[12,"impl-Borrow%3Cstr%3E-for-Uri%3CT%3E"],[27,"impl-Display-for-ParseError%3CI%3E"],[28,"impl-Debug-for-ParseError%3CI%3E"],[29,"impl-Debug-for-Uri%3CT%3E"],[30,"impl-Display-for-Uri%3CT%3E"],[93,"impl-Display-for-Scheme"],[94,"impl-Debug-for-Scheme"],[95,"impl-Debug-for-Authority%3CT%3E"],[96,"impl-Display-for-Authority%3CT%3E"],[128,"impl-AsRef%3CEStr%3CE%3E%3E-for-EString%3CE%3E"],[129,"impl-AsRef%3Cstr%3E-for-EString%3CE%3E"],[130,"impl-AsRef%3CEStr%3CE%3E%3E-for-EStr%3CE%3E"],[131,"impl-AsRef%3Cstr%3E-for-EStr%3CE%3E"],[159,"impl-PartialEq%3CEStr%3CE%3E%3E-for-EString%3CE%3E"],[160,"impl-PartialEq%3C%26str%3E-for-EString%3CE%3E"],[161,"impl-PartialEq%3Cstr%3E-for-EString%3CE%3E"],[162,"impl-PartialEq-for-EString%3CE%3E"],[163,"impl-PartialEq%3C%26EStr%3CE%3E%3E-for-EString%3CE%3E"],[164,"impl-PartialEq-for-EStr%3CE%3E"],[165,"impl-PartialEq%3CEString%3CE%3E%3E-for-EStr%3CE%3E"],[166,"impl-PartialEq%3CEString%3CE%3E%3E-for-%26EStr%3CE%3E"],[167,"impl-PartialEq%3Cstr%3E-for-EStr%3CE%3E"],[168,"impl-Debug-for-EString%3CE%3E"],[169,"impl-Display-for-EString%3CE%3E"],[170,"impl-Display-for-EStr%3CE%3E"],[171,"impl-Debug-for-EStr%3CE%3E"]]}],\
["proc_macro2",{"doc":"github crates-io docs-rs","t":"PPPGFPFPPFFPPPFPGFFGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNFENNNNNNNNNNNNNN","n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delim_span","delimiter","eq","eq","eq","eq","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","source_text","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","DelimSpan","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","join","open","to_owned","try_from","try_into","type_id","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":[[0,"proc_macro2"],[228,"proc_macro2::extra"],[243,"proc_macro2::token_stream"],[259,"core::cmp"],[260,"core::marker"],[261,"core::convert"],[262,"core::iter::traits::collect"],[263,"core::fmt"],[264,"core::fmt"],[265,"proc_macro"],[266,"core::hash"],[267,"core::option"],[268,"alloc::string"],[269,"core::ops::range"],[270,"core::any"]],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns an object that holds this group’s <code>span_open()</code> and","Returns the punctuation used as the delimiter for this …","","","","","","","Items which do not have a correspondence to any API in the …","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the source text behind a span. This preserves the …","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An object that holds a <code>Group</code>’s <code>span_open()</code> and …","","","","","Returns a span for the closing punctuation of the group …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a span covering the entire delimited group.","Returns a span for the opening punctuation of the group …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[11,10,10,0,0,8,0,8,11,0,0,8,10,10,0,8,0,0,0,0,1,24,7,6,8,9,10,1,11,12,5,24,7,6,8,9,10,1,11,12,5,5,6,5,7,6,8,9,10,1,11,12,5,7,6,8,9,10,1,11,12,5,12,7,9,9,10,11,12,12,7,7,0,5,5,5,5,24,24,7,7,6,8,8,9,9,10,1,1,11,12,12,5,5,24,7,7,7,6,6,8,8,8,8,8,9,10,1,11,12,5,7,7,7,5,12,5,5,5,5,5,5,5,5,5,5,24,7,6,8,9,10,1,11,12,5,7,7,5,5,6,6,6,7,9,1,12,12,12,6,8,9,1,12,5,6,1,24,8,9,1,12,5,9,9,9,5,5,7,6,8,9,10,1,11,12,5,24,7,8,9,1,12,5,0,24,7,6,8,9,10,1,11,12,5,24,7,6,8,9,10,1,11,12,5,24,7,6,8,9,10,1,11,12,5,5,5,5,5,5,5,5,5,5,5,6,5,5,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36],"f":"````````````````````{bd}{ce{}{}}0000000000000000000{{{h{f}}}j}{{}l}{dj}{nn}{ll}{A`A`}{AbAb}{AdAd}{bb}{AfAf}{AhAh}{jj}{{ce}Aj{}{}}00000000{{AhAh}Al}{{}n}{AbAn}{AbAd}{{AdAd}B`}{{AfAf}B`}{{Ahc}B`{Bb{Bf{Bd}}}}{{AhAh}B`}{{nc}Aj{{Bj{}{{Bh{n}}}}}}{{nc}Aj{{Bj{}{{Bh{A`}}}}}}`{Blj}0{Bnj}0{{C`Cb}Cd}0{{nCb}Cd}0{{lCb}Cd}{{A`Cb}Cd}0{{AbCb}Cd}0{{AdCb}Cd}{{bCb}Cd}0{{AfCb}Cd}{{AhCb}Cd}0{{jCb}Cd}0{cc{}}{A`n}{Cfn}22{Chl}{jA`}{AbA`}5{AhA`}{bA`}777777{cn{{Bj{}{{Bh{n}}}}}}{cn{{Bj{}{{Bh{A`}}}}}}{Bd{{Cj{nC`}}}}{Bd{{Cj{jC`}}}}{{Ahc}AjCl}{Cnj}0{D`j}0{Dbj}0{Ddj}0{Dfj}0{ce{}{}}000000000{nDh}{nB`}{Djj}0{{ll}{{Dl{l}}}}{{ll}l}{{}l}{{}n}{{Adn}Ab}{{dAf}b}{{Bdl}Ah}0{{AhAh}{{Dl{Al}}}}6{{A`l}Aj}{{Abl}Aj}{{bl}Aj}{{Ahl}Aj}{{jl}Aj}{l{{Dl{Dn}}}}{bAf}{C`l}{A`l}{Abl}{bl}{Ahl}{jl}33{Abn}{Bdj}{{jc}{{Dl{l}}}{{Eb{E`}}}}{ce{}{}}00000000{cDn{}}000000`{c{{Cj{e}}}{}{}}0000000000000000000{cEd{}}000000000{Efj}0{Ehj}0{Ejj}0{Elj}0{fj}0{lCh}{E`j}0`::{AnAn}{{ce}Aj{}{}}{Anl}{{AnCb}Cd}{cc{}}?22?==<``??{DhDh}4{{DhCb}Cd}2{ce{}{}}0{Dh{{Dl{A`}}}}{Dh{{En{E`{Dl{E`}}}}}}2{c{{Cj{e}}}{}{}}0{cEd{}}","c":[],"p":[[5,"Punct",0],[1,"char"],[1,"u8"],[1,"slice"],[5,"Literal",0],[5,"Span",0],[5,"TokenStream",0],[6,"TokenTree",0],[5,"Group",0],[6,"Delimiter",0],[6,"Spacing",0],[5,"Ident",0],[1,"unit"],[6,"Ordering",259],[5,"DelimSpan",228],[1,"bool"],[10,"Sized",260],[1,"str"],[10,"AsRef",261],[17,"Item"],[10,"IntoIterator",262],[1,"f32"],[1,"f64"],[5,"LexError",0],[5,"Formatter",263],[8,"Result",263],[5,"TokenStream",264],[5,"Span",264],[6,"Result",265],[10,"Hasher",266],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[5,"IntoIter",243],[1,"isize"],[6,"Option",267],[5,"String",268],[1,"usize"],[10,"RangeBounds",269],[5,"TypeId",270],[1,"u128"],[1,"u16"],[1,"u32"],[1,"u64"],[1,"tuple"]],"b":[[68,"impl-PartialEq%3CT%3E-for-Ident"],[69,"impl-PartialEq-for-Ident"],[70,"impl-Extend%3CTokenStream%3E-for-TokenStream"],[71,"impl-Extend%3CTokenTree%3E-for-TokenStream"],[77,"impl-Debug-for-LexError"],[78,"impl-Display-for-LexError"],[79,"impl-Display-for-TokenStream"],[80,"impl-Debug-for-TokenStream"],[82,"impl-Display-for-TokenTree"],[83,"impl-Debug-for-TokenTree"],[84,"impl-Display-for-Group"],[85,"impl-Debug-for-Group"],[87,"impl-Debug-for-Punct"],[88,"impl-Display-for-Punct"],[90,"impl-Display-for-Ident"],[91,"impl-Debug-for-Ident"],[92,"impl-Debug-for-Literal"],[93,"impl-Display-for-Literal"],[95,"impl-From%3CTokenTree%3E-for-TokenStream"],[96,"impl-From%3CTokenStream%3E-for-TokenStream"],[100,"impl-From%3CLiteral%3E-for-TokenTree"],[101,"impl-From%3CGroup%3E-for-TokenTree"],[103,"impl-From%3CIdent%3E-for-TokenTree"],[104,"impl-From%3CPunct%3E-for-TokenTree"],[111,"impl-FromIterator%3CTokenStream%3E-for-TokenStream"],[112,"impl-FromIterator%3CTokenTree%3E-for-TokenStream"]]}],\
["quote",{"doc":"github crates-io docs-rs","t":"KKKMMMMMQNNQQNNNNM","n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":[[0,"quote"],[18,"proc_macro2"],[19,"core::convert"],[20,"core::iter::traits::collect"],[21,"core::fmt"],[22,"core::fmt"]],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,1,1,1,1,7,0,6,6,0,0,7,7,6,6,6],"f":"```{{bc}d{{h{f}}}}{{bc}dj}{{bce}djl}0{{nA`}Ab}`{lAd}0``{n{{Ah{Af}}}}011{{lAd}d}","c":[],"p":[[10,"TokenStreamExt",0],[1,"unit"],[6,"TokenTree",18],[10,"Into",19],[10,"IntoIterator",20],[10,"ToTokens",0],[10,"IdentFragment",0],[5,"Formatter",21],[8,"Result",21],[5,"TokenStream",18],[5,"Span",18],[6,"Option",22]],"b":[]}],\
["ref_cast",{"doc":"github crates-io docs-rs","t":"RKYYMXM","n":["From","RefCast","RefCast","RefCastCustom","ref_cast","ref_cast_custom","ref_cast_mut"],"q":[[0,"ref_cast"],[7,"core::marker"]],"d":["","Safely cast <code>&amp;T</code> to <code>&amp;U</code> where the struct <code>U</code> contains a single …","Derive the <code>RefCast</code> trait.","Derive that makes the <code>ref_cast_custom</code> attribute able to …","","Create a function for a RefCast-style reference cast. Call …",""],"i":[2,0,0,0,2,0,2],"f":"````{c{{d{}{{b{c}}}}}f}`0","c":[],"p":[[17,"From"],[10,"RefCast",0],[10,"Sized",7]],"b":[]}],\
["ref_cast_impl",{"doc":"","t":"YYX","n":["RefCast","RefCastCustom","ref_cast_custom"],"q":[[0,"ref_cast_impl"]],"d":["Derive the <code>RefCast</code> trait.","Derive that makes the <code>ref_cast_custom</code> attribute able to …","Create a function for a RefCast-style reference cast. Call …"],"i":[0,0,0],"f":"```","c":[],"p":[],"b":[]}],\
["syn",{"doc":"github crates-io docs-rs","t":"FPPPPFPPPFPFPPGFPPFFGPPPPPPPPPFPPPPPPPPPPPPFFPPGFFFPPFPPPPPFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFPGFGFFPPPGGFPPPFPFPFPPPPPPPPFPPPPFPGPFFFFFFFPPFPPGPPGGFFPPPPPPPPPPPPPPPPPPPPFFPPPGFFFPPFPPPPPPPIPGPPPPPPPPPPQPFGPPPPPFGPPPPFFFFFFFFFGFFFFFFFGPPPPPPFPPPPFGFGPPOOOOOOOOOONOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOQOOOOQCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOONNOOQQONNNOOOOOOOOOOOOOOOOOONNNNNOOOOOOOOOOOOCOOOOONNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOONOOOOOONNNNOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONOOOONOOOONOOOOOOONOOCOOOOOOOOOOONNNNNNNNNNNNOOOOOOOOOOOOOOOQCHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNQNNNNNQQHNNNNNNOOOOOOOOOOOOCOOOONNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOCNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONONNNNNOOOOOOOOONNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKMTMFNNNNONNHONNNNPFFFPRKFIKKIFNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKKMMPFFFFGFFFPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKMFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFKFFFFFFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Abi","Add","AddAssign","And","AngleBracketed","AngleBracketedGenericArguments","Array","Array","Assign","AssocConst","AssocConst","AssocType","AssocType","Async","AttrStyle","Attribute","Await","BareFn","BareFnArg","BareVariadic","BinOp","Binary","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Block","Bool","BoundLifetimes","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closure","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivAssign","Enum","Eq","Err","Error","Expr","ExprArray","ExprAssign","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprConst","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprInfer","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","Field","Field","FieldMutability","FieldValue","Fields","FieldsNamed","FieldsUnnamed","Float","ForLoop","Ge","GenericArgument","GenericParam","Generics","Group","Group","Gt","Ident","If","ImplGenerics","ImplTrait","Index","Index","Infer","Infer","Inherited","Inner","Int","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeParam","List","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","Loop","Lt","Macro","Macro","Macro","MacroDelimiter","Match","Maybe","Member","Meta","MetaList","MetaNameValue","MethodCall","Mul","MulAssign","NameValue","Named","Named","Ne","Neg","Never","None","None","None","Not","Ok","Or","Outer","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Path","Path","Path","Path","PathArguments","PathSegment","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Reference","Reference","Rem","RemAssign","Repeat","Restricted","Result","Return","ReturnType","Shl","ShlAssign","Shr","ShrAssign","Slice","Str","Struct","Struct","Sub","SubAssign","Token","Trait","TraitBound","TraitBoundModifier","TraitObject","Try","TryBlock","Tuple","Tuple","Turbofish","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","UnOp","Unary","Union","Unit","Unnamed","Unnamed","Unsafe","Variant","Verbatim","Verbatim","Verbatim","Verbatim","VisRestricted","Visibility","WhereClause","WherePredicate","While","Yield","abi","and_token","and_token","apostrophe","args","args","args","arguments","as_token","as_token","as_turbofish","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","bang_token","bang_token","base","base10_digits","base10_digits","base10_parse","base10_parse","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","brace_token","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","buffer","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","const_params","const_params_mut","const_token","const_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","delimiter","delimiter","discriminant","dot2_token","dot_token","dot_token","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","enum_token","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","expr","expr","expr","ext","extern_token","fields","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","generics","generics","generics","get_ident","group_token","group_token","gt_token","gt_token","gt_token","gt_token","hash","hash","hash","hash","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","impl_token","in_token","index","index","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_empty","is_ident","is_none","iter","iter_mut","leading_colon","left","len","len","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","lit","lt_token","lt_token","lt_token","lt_token","mac","mac","make_where_clause","member","member","meta","meta","method","modifier","mutability","mutability","mutability","mutability","name","name","name","named","new","new","new","new","new","new","new","new","new","new","new","new_raw","op","op","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args","parse_args_with","parse_args_with","parse_body","parse_body_with","parse_inner","parse_macro_input","parse_mod_style","parse_named","parse_nested_meta","parse_nested_meta","parse_outer","parse_quote","parse_quote_spanned","parse_str","parse_unnamed","parse_with","partial_cmp","partial_cmp","path","path","path","path","path","path","path","path","path","path","position","pound_token","predicates","pub_token","punctuated","qself","qself","qself","receiver","require_ident","require_list","require_name_value","require_path_only","rest","right","segments","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","struct_token","style","suffix","suffix","suffix","suffix","suffix","suffix","suffix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","tokens","tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","turbofish","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","underscore_token","union_token","unnamed","unraw","unsafety","value","value","value","value","value","value","value","value","variadic","variants","vis","vis","where_clause","where_token","without_plus","without_plus","without_plus","without_plus","Cursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","partial_cmp","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","ParseNestedMeta","borrow","borrow_mut","error","from","input","into","parse_nested_meta","parser","path","try_from","try_into","type_id","value","Err","Error","Lookahead1","Nothing","Ok","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone","clone_into","clone_into","clone_into","combine","cursor","deref","discouraged","drop","error","error","error","extend","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","into","into","into","into","into","into_compile_error","into_iter","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_any_delimiter","parse_str","parse_terminated","peek","peek","peek2","peek3","span","span","span","step","to_compile_error","to_owned","to_owned","to_owned","to_string","to_string","to_tokens","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AnyDelimiter","Speculative","advance_to","parse_any_delimiter","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","default","empty_or_trailing","extend","extend","first","first_mut","from","from","from","from","from","from","from","from","from_iter","from_iter","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","pop_punct","punct","punct_mut","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","Spanned","span","Abstract","And","AndAnd","AndEq","As","Async","At","Auto","Await","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Comma","Const","Continue","Crate","Default","Do","Dollar","Dot","DotDot","DotDotDot","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Minus","MinusEq","Mod","Move","Mut","Ne","Not","Or","OrEq","OrOr","Override","Paren","PathSep","Percent","PercentEq","Plus","PlusEq","Pound","Priv","Pub","Question","RArrow","Ref","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Slash","SlashEq","Star","StarEq","Static","Struct","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"syn"],[2121,"syn::buffer"],[2155,"syn::ext"],[2159,"syn::meta"],[2173,"syn::parse"],[2274,"syn::parse::discouraged"],[2278,"syn::punctuated"],[2440,"syn::spanned"],[2442,"syn::token"],[4127,"core::str::traits"],[4128,"core::cmp"],[4129,"core::convert"],[4130,"core::marker"],[4131,"core::fmt"],[4132,"core::fmt"],[4133,"core::fmt"],[4134,"core::convert"],[4135,"core::hash"],[4136,"proc_macro2"],[4137,"proc_macro2"],[4138,"core::ops::function"],[4139,"proc_macro2::extra"],[4140,"alloc::string"],[4141,"core::any"],[4142,"proc_macro2"],[4143,"proc_macro2"],[4144,"core::ops::function"],[4145,"core::default"]],"d":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","An equality constraint on an associated constant: the …","An equality constraint on an associated constant: the …","A binding (equality constraint) on an associated type: the …","A binding (equality constraint) on an associated type: the …","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute, like <code>#[repr(transparent)]</code>.","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","The variadic argument of a function pointer like …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","","The <code>==</code> operator (equality)","Contains the error value","Error returned when a Syn parser cannot parse the input …","A Rust expression.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","A blocked scope: <code>{ ... }</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","Unused, but reserved for RFC 3323 restrictions.","A field-value pair in a struct literal.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A for loop: <code>for pat in expr { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","An expression contained within invisible delimiters.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","A word of Rust code, which may be a keyword or legal …","An <code>if</code> expression with an optional <code>else</code> block: …","Returned by <code>Generics::split_for_impl</code>.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>&#39;a</code>.","A lifetime parameter: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A character literal: <code>&#39;a&#39;</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro in the type position.","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","The never type: <code>!</code>.","","","","The <code>!</code> operator for logical inversion","Contains the success value","The <code>||</code> operator (logical or)","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path like <code>std::slice::Iter</code>, optionally qualified with a …","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An array literal constructed from one repeated element: …","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A dynamically sized slice type: <code>[T]</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A type argument.","A particular type is returned.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","An enum variant.","Tokens in expression position not interpreted by Syn.","","A raw token literal not interpreted by Syn.","Tokens in type position not interpreted by Syn.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number typehe type being bounded","","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","","Parse a set of curly braces and expose their content to …","","","","","Parse a set of square brackets and expose their content to …","A stably addressed token buffer supporting efficient …he colon in <code>Struct { x: x }</code>. If written in shorthand like …","","","","","","","","Returns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","","","","","","","","","Explicit discriminant: <code>Variant = 1</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extension traits to provide parsing methods on foreign …","","Content stored in the variant.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","If this path consists of a single ident, returns the ident.","","","","","","","","","","","","Name of the variant.","Name of the field, if any.","","","","","","","","","","","","<code>(A, B)</code>","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to the …","","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","Returns the number of fields.","","","","","Returns an Iterator&lt;Item = &amp;LifetimeParam&gt; over the …","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator&lt;Item = &amp;mut LifetimeParam&gt; over the …","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","Facility for interpreting structured content inside of an …","","","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","<code>C</code>","","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","See <code>Attribute::parse_args</code>.","Parse the arguments to the attribute using the given …","See <code>Attribute::parse_args_with</code>.","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parse a <code>Path</code> containing no path arguments on any of its …","Parses a named (braced struct) field.","Parse the arguments to the attribute, expecting it to …","See <code>Attribute::parse_nested_meta</code>.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a string of Rust code into the chosen syntax tree …","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","","","Returns the path that identifies the interpretation of …","Returns the path that begins this structured meta item.","","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","An error if this path is not a single ident, as defined in …","Error if this is a <code>Meta::Path</code> or <code>Meta::NameValue</code>.","Error if this is a <code>Meta::Path</code> or <code>Meta::List</code>.","Error if this is a <code>Meta::List</code> or <code>Meta::NameValue</code>.","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","Returns the span of this <code>Ident</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A trait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…okens representing Rust punctuation, keywords, and …eturns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","","","","","","","","","","","","","","","","In some positions, types may not contain the <code>+</code> character, …","","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","","If the cursor is pointing at a <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Context for parsing a single property in the conventional …","","","Report that the attribute’s content did not conform to …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Used when parsing <code>list(...)</code> syntax <strong>if</strong> the content inside …","Make a parser that is usable with <code>parse_macro_input!</code> in a …","","","","","Used when parsing <code>key = &quot;value&quot;</code> syntax.","Contains the error value","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","Contains the success value","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","Forks a parse stream so that parsing tokens out of either …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","The source location of the error.","Returns the <code>Span</code> of the next token in the parse stream, or …","","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support manipulating …","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","Returns the delimiter, the span of the delimiter token, …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","<strong>A punctuated sequence of syntax tree nodes of type <code>T</code> </strong>…","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Removes the trailing punctuation from this punctuated …","Borrows the punctuation from this punctuated pair, unless …","Mutably borrows the punctuation from this punctuated pair, …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>become</code>","<code>box</code>","<code>{</code>…<code>}</code>","<code>[</code>…<code>]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>-</code>","<code>-=</code>","<code>mod</code>","<code>move</code>","<code>mut</code>","<code>!=</code>","<code>!</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(</code>…<code>)</code>","<code>::</code>","<code>%</code>","<code>%=</code>","<code>+</code>","<code>+=</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>/</code>","<code>/=</code>","<code>*</code>","<code>*=</code>","<code>static</code>","<code>struct</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[0,65,65,65,69,0,26,80,26,0,70,0,70,26,0,0,26,80,0,0,0,26,65,65,65,65,65,65,26,57,0,64,64,26,57,57,26,26,57,26,26,45,70,0,0,70,26,0,0,0,0,98,66,0,65,65,22,65,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,0,0,57,26,65,0,0,0,26,80,65,0,26,0,80,0,26,26,80,77,12,57,65,26,0,45,50,54,70,0,13,0,26,0,0,0,0,0,0,0,26,65,0,26,80,0,26,52,0,0,0,0,26,65,65,13,17,41,65,66,80,52,69,79,66,6,65,12,26,64,80,69,0,0,13,26,80,0,0,0,0,80,77,0,26,26,80,65,65,26,77,0,26,0,65,65,65,65,80,57,22,26,65,65,0,50,0,0,80,26,26,26,80,0,0,45,54,70,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,22,17,17,41,26,0,26,50,57,80,0,0,0,0,26,26,82,38,91,10,28,35,71,68,29,76,1,16,20,21,27,28,29,30,31,32,33,34,35,36,37,38,39,40,43,46,47,48,96,97,63,87,30,3,5,3,5,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,119,121,117,116,27,131,114,28,29,132,137,122,30,125,31,130,32,134,133,33,135,34,126,35,36,37,136,38,120,127,39,118,128,123,40,129,115,124,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,3,5,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,119,121,117,116,27,131,114,28,29,132,137,122,30,125,31,130,32,134,133,33,135,34,126,35,36,37,136,38,120,127,39,118,128,123,40,129,115,124,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,3,5,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,56,46,47,55,56,74,84,93,18,24,39,0,11,32,81,92,0,0,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,3,5,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,3,5,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,8,10,71,20,43,46,47,48,55,56,74,97,44,44,48,90,0,0,21,44,49,69,47,48,14,63,16,39,30,35,97,93,81,83,88,90,91,92,94,24,8,8,10,41,42,15,47,48,72,73,29,31,32,36,38,40,43,0,95,16,23,25,39,8,8,8,10,41,42,3,5,82,49,8,8,8,8,8,8,8,9,1,2,10,11,12,13,13,13,13,14,15,16,17,17,17,18,19,20,21,22,23,24,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,119,121,117,116,27,131,114,28,29,132,137,122,30,125,31,130,32,134,133,33,135,34,126,35,36,37,136,38,120,127,39,118,128,123,40,129,115,124,41,41,41,41,42,42,43,44,45,45,45,45,46,47,47,48,49,50,50,50,51,52,53,54,54,54,55,56,57,57,57,57,57,57,57,57,58,59,60,61,3,3,5,5,62,63,64,65,66,67,67,68,68,69,70,71,72,73,74,75,76,77,78,79,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,28,21,72,73,74,67,31,83,44,49,71,76,8,10,41,42,10,16,20,21,47,48,68,72,73,74,84,78,32,42,75,82,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,119,121,117,116,27,131,114,28,29,132,137,122,30,125,31,130,32,134,133,33,135,34,126,35,36,37,136,38,120,127,39,118,128,123,40,129,115,124,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,3,5,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,17,17,17,17,69,67,69,17,17,67,27,17,81,46,55,91,44,49,51,56,82,44,33,44,49,71,76,34,86,44,30,43,0,11,35,51,20,38,90,91,95,96,97,18,8,10,46,57,58,59,60,61,3,5,62,8,27,40,75,82,44,19,28,35,36,51,75,78,82,88,94,0,0,0,8,10,13,14,15,16,18,19,21,26,33,34,37,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,58,59,60,61,3,5,62,63,65,66,67,68,70,71,75,77,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,0,8,11,14,11,14,63,63,11,0,67,20,11,14,11,0,0,0,20,58,8,10,11,13,14,15,37,39,51,63,78,89,76,11,53,78,0,37,39,89,35,67,13,13,13,39,27,67,23,81,8,10,57,58,59,60,61,3,5,62,8,8,8,9,1,2,10,10,11,13,14,15,16,17,18,19,20,21,26,119,121,117,116,27,131,114,28,29,132,137,122,30,125,31,130,32,134,133,33,135,34,126,35,36,37,136,38,120,127,39,118,128,123,40,129,115,124,41,41,42,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,57,58,58,59,59,60,60,61,61,3,3,5,5,62,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,42,62,0,44,90,23,11,57,58,59,60,61,3,5,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,3,5,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,8,10,3,5,8,9,1,2,10,11,13,14,15,16,17,18,19,20,21,26,119,121,117,116,27,131,114,28,29,132,137,122,30,125,31,130,32,134,133,33,135,34,126,35,36,37,136,38,120,127,39,118,128,123,40,129,115,124,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,3,5,62,63,65,66,67,68,69,70,71,72,73,74,75,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,0,58,59,60,61,3,5,62,14,63,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,119,121,117,116,27,131,114,28,29,132,137,122,30,125,31,130,32,134,133,33,135,34,126,35,36,37,136,38,120,127,39,118,128,123,40,129,115,124,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,3,5,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,119,121,117,116,27,131,114,28,29,132,137,122,30,125,31,130,32,134,133,33,135,34,126,35,36,37,136,38,120,127,39,118,128,123,40,129,115,124,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,3,5,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,35,20,29,48,72,76,96,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,119,121,117,116,27,131,114,28,29,132,137,122,30,125,31,130,32,134,133,33,135,34,126,35,36,37,136,38,120,127,39,118,128,123,40,129,115,124,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,3,5,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,44,44,85,25,19,8,82,58,59,60,61,62,15,62,73,82,24,20,21,44,53,80,84,93,98,0,0,162,162,163,162,163,163,163,163,163,163,162,163,163,163,162,163,163,163,162,162,163,163,163,163,163,163,162,163,162,163,162,163,0,167,167,167,0,155,155,155,155,155,155,155,0,155,155,155,155,155,6,0,0,0,6,153,0,0,0,0,0,0,0,170,168,174,170,172,173,168,174,170,172,173,170,168,172,173,168,172,173,168,170,172,0,170,174,170,172,168,168,168,170,170,170,168,168,174,170,172,173,168,174,170,172,173,168,168,168,170,170,168,168,150,170,153,173,153,170,153,170,174,170,170,170,168,170,173,170,168,168,172,173,168,170,173,168,174,170,172,173,168,174,170,172,173,168,174,170,172,173,0,0,182,183,188,0,0,0,0,0,0,0,0,188,179,185,190,186,187,143,144,188,179,185,190,186,187,143,144,188,179,179,185,186,187,143,188,179,179,185,186,187,143,188,188,179,179,179,179,179,179,179,185,190,186,187,143,144,188,179,179,179,179,179,179,185,190,186,187,143,144,188,179,179,179,185,190,186,187,143,144,179,188,188,179,179,179,179,179,179,185,190,186,187,143,144,179,188,185,190,186,187,143,144,185,190,186,187,143,144,179,179,179,179,179,179,179,179,188,188,179,179,179,185,190,186,187,143,144,179,188,179,185,186,187,143,188,179,188,179,179,185,190,186,187,143,144,188,179,185,190,186,187,143,144,188,179,185,190,186,187,143,144,188,188,188,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,193,113,194,195,196,197,198,199,200,201,202,203,109,204,205,206,207,208,111,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,108,110,227,228,112,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,193,113,194,195,196,197,198,199,200,201,202,203,109,204,205,206,207,208,111,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,108,110,227,228,112,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,193,113,194,195,196,197,198,199,200,201,202,203,109,204,205,206,207,208,111,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,108,110,227,228,112,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,193,113,194,195,196,197,198,199,200,201,202,203,109,204,205,206,207,208,111,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,108,110,227,228,112,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,193,113,194,195,196,197,198,199,200,201,202,203,109,204,205,206,207,208,111,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,108,110,227,228,112,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,113,241,244,245,247,248,249,250,254,258,261,262,265,266,270,272,274,275,277,282,284,286,113,241,244,245,247,248,249,250,254,258,261,262,265,266,270,272,274,275,277,282,284,286,193,113,194,195,196,197,198,199,200,201,202,203,109,204,205,206,207,208,111,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,108,110,227,228,112,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,193,113,194,195,196,197,198,199,200,201,202,203,109,204,205,206,207,208,111,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,108,110,227,228,112,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,113,194,195,196,197,198,199,200,201,202,203,109,204,205,206,207,208,111,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,108,110,227,228,112,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,113,194,195,196,197,198,199,200,201,202,203,109,204,205,206,207,208,111,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,108,110,227,228,112,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,193,194,195,196,197,198,199,200,201,202,203,109,204,205,206,207,208,111,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,108,110,227,228,112,229,230,231,232,233,234,235,236,237,238,239,240,287,288,289,113,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,193,287,288,289,193,113,194,195,196,197,198,199,200,201,202,203,109,204,205,206,207,208,111,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,108,110,227,228,112,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,113,194,195,196,197,198,199,200,201,202,203,109,204,205,206,207,208,111,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,108,110,227,228,112,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,193,113,194,195,196,197,198,199,200,201,202,203,109,204,205,206,207,208,111,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,108,110,227,228,112,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,193,113,194,195,196,197,198,199,200,201,202,203,109,204,205,206,207,208,111,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,108,110,227,228,112,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,193,113,194,195,196,197,198,199,200,201,202,203,109,204,205,206,207,208,111,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,108,110,227,228,112,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289],"f":"````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{bd}``````````````````````````{fh}{jh}{f{{l{c}}}n}{j{{l{c}}}n}{ce{}{}}000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000``````````````````{A`A`}{AbAb}{bb}{dd}{AdAd}{AfAf}{AhAh}{AjAj}{AlAl}{AnAn}{B`B`}{BbBb}{BdBd}{BfBf}{BhBh}{BjBj}{BlBl}{BnBn}{C`C`}{CbCb}{CdCd}{CfCf}{ChCh}{CjCj}{ClCl}{CnCn}{D`D`}{DbDb}{DdDd}{DfDf}{DhDh}{DjDj}{DlDl}{DnDn}{E`E`}{EbEb}{EdEd}{EfEf}{EhEh}{EjEj}{ElEl}{EnEn}{F`F`}{FbFb}{FdFd}{FfFf}{FhFh}{FjFj}{FlFl}{FnFn}{G`G`}{GbGb}{GdGd}{GfGf}{GhGh}{GjGj}{ff}{jj}{GlGl}{GnGn}{H`H`}{HbHb}{HdHd}{HfHf}{HhHh}{HjHj}{HlHl}{HnHn}{I`I`}{IbIb}{IdId}{IfIf}{IhIh}{IjIj}{IlIl}{InIn}{J`J`}{JbJb}{JdJd}{JfJf}{JhJh}{JjJj}{JlJl}{JnJn}{K`K`}{KbKb}{KdKd}{KfKf}{KhKh}{KjKj}{KlKl}{KnKn}{L`L`}{LbLb}{LdLd}{{ce}Lf{}{}}0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{{A`A`}Lh}{{AdAd}Lh}`````````````````{{}Eh}{{}Fb}{{}Hj}``````````````````{{A`A`}Lj}{{A`c}Lj{{Ll{h}}Ln}}{{AdAd}Lj}{{EbEb}Lj}{{EdEd}Lj}``````````````````{{A`M`}{{Md{LfMb}}}}00{{AdM`}Mf}{{EbM`}Mf}{{EdM`}Mf}{{fM`}Mf}{{jM`}Mf}``{MhA`}{MjA`}{MlA`}{MnA`}{N`A`}{cc{}}{NbA`}1111111{HfAj}{AlAj}{AnAj}444{BfBb}5{BdBb}66666666{ClCd}{NdCd}{DlCd}{NfCd}{ChCd}{NhCd}<{CjCd}{NjCd}{DjCd}{E`Cd}{NlCd}{DdCd}{NnCd}{O`Cd}{ObCd}{OdCd}{OfCd}{DfCd}{OhCd}{DnCd}{OjCd}{CfCd}{OlCd}{OnCd}{A`Cd}{AbCd}{CnCd}{DbCd}{AdCd}{AfCd}{DhCd}{AhCd}{AjCd}{AlCd}{AnCd}{AA`Cd}{AAbCd}{D`Cd}{cc{}}00000000000000000000000000000000000000{AAdEb}{EdEb}{A`Eb}3{AAdEd}44{F`Ej}{ElEj}6{EnEj}77{A`En}888{AdFd}{FfFd}:::{FnFl}{G`Fl}<<<{GfGb}{GhGb}{GjGb}{GdGb}{cc{}}{jGb}{fGb}{GlGb}3333{AAff}44{AAfj}55555{cHf{{AAh{Hh}}}}66{cHh{{AAh{A`}}}}77777777777{JdJ`}{KfJ`}9{JhJ`}{JnJ`}{KdJ`}{JfJ`}{JbJ`}{JlJ`}{KlJ`}{JjJ`}{KbJ`}{K`J`}{KhJ`}{KjJ`}{cc{}}00000000000000000`````{Hf{{AAj{A`}}}}``````{{A`c}LfAAl}{{Adc}LfAAl}{{Ebc}LfAAl}{{Edc}LfAAl}````````````````{ce{}{}}0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{Bbc{}}00{BbLj}{HjLj}{{Hfc}LjLn}1{Bb{{AAn{Bh}}}}{Bb{{AB`{Bh}}}}``{BbAAd}`````````````````{EhFj}``````````````{{hABb}A`}{{hABb}Ad}{AdEl}{AAfGb}{{hABb}Gd}{{{ABf{ABd}}ABb}Gf}{{ABdABb}Gh}{{ABhABb}Gj}{{hABb}f}{{hABb}j}{{LjABb}Gl}:`````````````````{ABj{{l{c}}}ABl}{ABn{{l{A`}}}}{ABn{{l{Ad}}}}{ABn{{l{Aj}}}}{ABn{{l{Al}}}}{ABn{{l{An}}}}{ABn{{l{B`}}}}{ABn{{l{Bd}}}}{ABn{{l{Bf}}}}{ABn{{l{Bj}}}}{ABn{{l{Cd}}}}{ABn{{l{Db}}}}{ABn{{l{Dd}}}}{ABn{{l{Dj}}}}{ABn{{l{Dn}}}}{ABn{{l{Eb}}}}{ABn{{l{Ed}}}}{ABn{{l{Ef}}}}{ABn{{l{Eh}}}}{ABn{{l{Ej}}}}{ABn{{l{El}}}}{ABn{{l{En}}}}{ABn{{l{F`}}}}{ABn{{l{Fb}}}}{ABn{{l{Fd}}}}{ABn{{l{Ff}}}}{ABn{{l{Fh}}}}{ABn{{l{Fj}}}}{ABn{{l{Fl}}}}{ABn{{l{Gb}}}}{ABn{{l{Gd}}}}{Gd{{l{c}}}ABl}{ABn{{l{Gf}}}}{ABn{{l{Gh}}}}{ABn{{l{Gj}}}}{ABn{{l{f}}}}{ABn{{l{j}}}}{ABn{{l{Gl}}}}{ABn{{l{Gn}}}}{ABn{{l{Hb}}}}{ABn{{l{Hd}}}}{ABn{{l{Hf}}}}{ABn{{l{Hh}}}}{ABn{{l{Hl}}}}{ABn{{l{Hn}}}}{ABn{{l{If}}}}{ABn{{l{Ij}}}}{ABn{{l{J`}}}}{ABn{{l{Jb}}}}{ABn{{l{Jd}}}}{ABn{{l{Jf}}}}{ABn{{l{Jh}}}}{ABn{{l{Jj}}}}{ABn{{l{Jl}}}}{ABn{{l{Jn}}}}{ABn{{l{K`}}}}{ABn{{l{Kb}}}}{ABn{{l{Kd}}}}{ABn{{l{Kf}}}}{ABn{{l{Kh}}}}{ABn{{l{Kj}}}}{ABn{{l{Kl}}}}{ABn{{l{Kn}}}}{ABn{{l{L`}}}}{ABn{{l{Ld}}}}{AC`{{l{c}}}ABl}{ABn{{l{A`}}}}{Af{{l{c}}}ABl}{Al{{l{c}}}ABl}{{Afc}lACb}{{Alc}lACb}{Gn{{l{c}}}ABl}{{Gnc}lACb}{ABn{{l{{ACd{Af}}}}}}`{ABn{{l{Hf}}}}{ABn{{l{Bh}}}}{{Afc}{{l{Lf}}}{{ACj{ACf}{{ACh{{l{Lf}}}}}}}}{{Alc}{{l{Lf}}}{{ACj{ACf}{{ACh{{l{Lf}}}}}}}}4``{h{{l{c}}}ABl}3{{Gdc}lACb}{{A`A`}{{AAj{Lh}}}}{{AdAd}{{AAj{Lh}}}}{AfHf}{AjHf}`````````````````{Hf{{l{A`}}}}{Aj{{l{Al}}}}{Aj{{l{An}}}}{Aj{{l{Hf}}}}`````{{A`ABb}Lf}{{AdABb}Lf}{{GbABb}Lf}{{GdABb}Lf}{{GfABb}Lf}{{GhABb}Lf}{{GjABb}Lf}{{fABb}Lf}{{jABb}Lf}{{GlABb}Lf}{A`{{AAj{ABb}}}}{A`ABb}{cABb{}}0000{AdABb}11111111111111111111111111111111111111111111111111{Eb{{AAj{ABb}}}}2{Ed{{AAj{ABb}}}}33333333333333{GbABb}4{GdABb}55{GfABb}{GhABb}7{GjABb}88{fABb}9{jABb}{GlABb};;{H`ACl}<<<<<<<<<<<{IhABb}=====================```{Eh{{ACn{Abb{AAj{Fj}}}}}}```{Gbh}{Gdh}{Gfh}{Ghh}{Gjh}{fh}{jh}{ce{}{}}0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{cAD`{}}000{{A`AC`}Lf}{{AbAC`}Lf}{{bAC`}Lf}{{dAC`}Lf}{{AdAC`}Lf}{{AfAC`}Lf}{{AjAC`}Lf}{{AlAC`}Lf}{{AnAC`}Lf}{{B`AC`}Lf}{{BbAC`}Lf}{{BdAC`}Lf}{{BfAC`}Lf}{{BhAC`}Lf}{{BjAC`}Lf}{{CdAC`}Lf}{{NnAC`}Lf}{{ObAC`}Lf}{{NjAC`}Lf}{{NhAC`}Lf}{{CfAC`}Lf}{{AfAC`}Lf}{{NdAC`}Lf}{{ChAC`}Lf}{{CjAC`}Lf}{{AhAC`}Lf}{{AAbAC`}Lf}{{OdAC`}Lf}{{ClAC`}Lf}{{OjAC`}Lf}{{CnAC`}Lf}{{AdAC`}Lf}{{D`AC`}Lf}{{AlAC`}Lf}{{AjAC`}Lf}{{DbAC`}Lf}{{AnAC`}Lf}{{DdAC`}Lf}{{OlAC`}Lf}{{DfAC`}Lf}{{DhAC`}Lf}{{DjAC`}Lf}{{AA`AC`}Lf}{{DlAC`}Lf}{{O`AC`}Lf}{{OnAC`}Lf}{{DnAC`}Lf}{{NlAC`}Lf}{{A`AC`}Lf}{{OfAC`}Lf}{{E`AC`}Lf}{{AbAC`}Lf}{{NfAC`}Lf}{{OhAC`}Lf}{{EbAC`}Lf}{{EdAC`}Lf}{{EfAC`}Lf}{{EhAC`}Lf}{{EjAC`}Lf}{{ElAC`}Lf}{{EnAC`}Lf}{{F`AC`}Lf}{{FbAC`}Lf}{{FdAC`}Lf}{{FfAC`}Lf}{{FhAC`}Lf}{{FjAC`}Lf}{{FlAC`}Lf}{{FnAC`}Lf}{{G`AC`}Lf}{{GbAC`}Lf}{{GdAC`}Lf}{{GfAC`}Lf}{{GhAC`}Lf}{{GjAC`}Lf}{{fAC`}Lf}{{jAC`}Lf}{{GlAC`}Lf}{{GnAC`}Lf}{{HbAC`}Lf}{{HdAC`}Lf}{{HfAC`}Lf}{{HhAC`}Lf}{{HjAC`}Lf}{{HlAC`}Lf}{{HnAC`}Lf}{{I`AC`}Lf}{{IbAC`}Lf}{{IdAC`}Lf}{{IfAC`}Lf}{{IjAC`}Lf}{{IlAC`}Lf}{{J`AC`}Lf}{{JbAC`}Lf}{{JdAC`}Lf}{{JfAC`}Lf}{{JhAC`}Lf}{{JjAC`}Lf}{{JlAC`}Lf}{{JnAC`}Lf}{{K`AC`}Lf}{{KbAC`}Lf}{{KdAC`}Lf}{{KfAC`}Lf}{{KhAC`}Lf}{{KjAC`}Lf}{{KlAC`}Lf}{{KnAC`}Lf}{{L`AC`}Lf}{{LbAC`}Lf}{{LdAC`}Lf}`{GdAAf}{GfAAf}{GhAAf}{GjAAf}{fAAf}{jAAf}{GlA`}``{c{{Md{e}}}{}{}}000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000```````{cADb{}}0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`````{A`A`}`{GdAD`}{Gf{{ACd{ABd}}}}{GhABd}{GjABh}{GlLj}`````````{ABn{{l{J`}}}}{ABn{{l{Jh}}}}{ABn{{l{Kj}}}}{ABn{{l{Ld}}}}``{ADdADf}{ce{}{}}000{ADfADf}{{ce}Lf{}{}}{{}ADf}{ADfLj}{{ADfADf}Lj}{cc{}}0{{ADfADh}{{AAj{{ACn{ADfAClADf}}}}}}{ADf{{AAj{{ACn{A`ADf}}}}}}88{ADf{{AAj{{ACn{AdADf}}}}}}{ADf{{AAj{{ACn{AAfADf}}}}}}{ABjADd}{AC`ADd}{{ADfADf}{{AAj{Lh}}}}{ADf{{AAj{{ACn{ADjADf}}}}}}{ADfABb}?{ADfAC`}{ADf{{AAj{{ACn{ADlADf}}}}}}{c{{Md{e}}}{}{}}000{cADb{}}0`{ABn{{l{ADn}}}}`{ADnA`}`{ce{}{}}0{{ACfc}AE`AEb}{cc{}}`2{{ACfc}{{l{Lf}}}{{ACj{ACf}{{ACh{{l{Lf}}}}}}}}{c{{`{{ACb{}{{ACh{Lf}}}}}}}{{ACj{ACf}{{ACh{{l{Lf}}}}}}}}`887{ACf{{l{ABn}}}}`````````````{{AEdAEd}Lf}6666666666{{AEd{AEf{ABn}{{ACh{{l{c}}}}}}}{{l{c}}}{}}{AE`AE`}{AEhAEh}{AEjAEj}{{ce}Lf{}{}}00{{AE`AE`}Lf}{AEdADf}{AEhc{}}`{AEdLf}{AElAE`}{{AEdc}AE`AEb}{{AEhc}AE`AEb}{{AE`c}Lf{{AF`{}{{AEn{AE`}}}}}}{{AE`M`}Mf}0{{AEdM`}Mf}0{AEdAEd}{AFbAE`}{cc{}}0000{ce{}{}}0000{AE`AC`}{AE`c{}}0{AEdLj}{AEdAEl}{{ABbc}AE`AEb}{{ce}AE`AFdAEb}{ABn{{l{ABl}}}}{AEd{{l{c}}}ABl}{{{ACb{}{{ACh{c}}}}ABj}{{l{c}}}{}}{ABn{{l{AEj}}}}{{{ACb{}{{ACh{c}}}}AC`}{{l{c}}}{}}{AEd{{l{{ACn{ADhAClAEd}}}}}}{{{ACb{}{{ACh{c}}}}h}{{l{c}}}{}}{{AEd{AEf{ABn}{{ACh{{l{c}}}}}}e}{{l{{AFf{c}}}}}{}AFh}{{AElc}LjAFh}{{AEdc}LjAFh}00{AE`ABb}{AEdABb}{cABb{}}{{AEde}{{l{c}}}{}{{AFj{AEh}{{ACh{{l{{ACn{cADf}}}}}}}}}}{AE`AC`}{ce{}{}}00{cAD`{}}0{{AEjAC`}Lf}{c{{Md{e}}}{}{}}000000000{cADb{}}0000``{{AFlAFl}Lf}{AFn{{l{{ACn{ADhAClAEd}}}}}}``````````6666666666666666{{{AFf{ce}}}Lf{}{}}{{{AFf{ce}}}{{AFf{ce}}}AG`AG`}{{{AGb{ce}}}{{AGb{ce}}}{}{}}{{{AGd{ce}}}{{AGd{ce}}}AG`AG`}{{{AGf{c}}}{{AGf{c}}}AG`}{{{AAn{c}}}{{AAn{c}}}{}}{{{AGh{ce}}}{{AGh{ce}}}AG`AG`}{{{AFf{ce}}{AFf{ce}}}LfAG`AG`}{{ce}Lf{}{}}000002{{}{{AFf{ce}}}{}{}}{{{AFf{ce}}}Lj{}{}}{{{AFf{ce}}g}Lf{}AGj{{AF`{}{{AEn{c}}}}}}{{{AFf{ce}}g}Lf{}AGj{{AF`{}{{AEn{{AGh{ce}}}}}}}}{{{AFf{ce}}}{{AAj{c}}}{}{}}0{cc{}}0000000{g{{AFf{ce}}}{}{}{{AF`{}{{AEn{{AGh{ce}}}}}}}}{e{{AFf{cg}}}{}{{AF`{}{{AEn{c}}}}}AGj}{{{AFf{ce}}AAd}g{}{}{}}0{{{AFf{ce}}AAdc}Lf{}AGj}{ce{}{}}0000000{{{AFf{ce}}}g{}{}{}}00111111{{{AFf{ce}}}{{AGd{ce}}}{}{}}{{{AGh{ce}}}{{ACn{c{AAj{e}}}}}{}{}}{{{AGh{ce}}}c{}{}}={{{AFf{ce}}}{{AAn{c}}}{}{}}{{{AFf{ce}}}{{AB`{c}}}{}{}}<<{{{AFf{ce}}}AAd{}{}}{{{AGb{ce}}}AAd{}{}}{{{AGl{ce}}}AAd{}{}}{{{AGd{ce}}}AAd{}{}}{{{AGf{c}}}AAd{}}{{{AAn{c}}}AAd{}}{{{AB`{c}}}AAd{}}{{}{{AFf{ce}}}{}{}}{{c{AAj{e}}}{{AGh{ce}}}{}{}}{{{AGb{ce}}}{{AAj{g}}}{}{}{}}{{{AGl{ce}}}{{AAj{g}}}{}{}{}}{{{AGd{ce}}}{{AAj{g}}}{}{}{}}{{{AGf{c}}}{{AAj{e}}}{}{}}{{{AAn{c}}}{{AAj{e}}}{}{}}{{{AB`{c}}}{{AAj{e}}}{}{}}543210{{{AFf{ce}}}{{AGb{ce}}}{}{}}{{{AFf{ce}}}{{AGl{ce}}}{}{}}{ABn{{l{{AFf{ce}}}}}ABl{AGnABl}}{{ABn{AEf{ABn}{{ACh{{l{c}}}}}}}{{l{{AFf{ce}}}}}{}{AGnABl}}{ABn{{l{{AFf{ce}}}}}ABlABl}{{ABn{AEf{ABn}{{ACh{{l{c}}}}}}}{{l{{AFf{ce}}}}}{}ABl}{{{AFf{ce}}}{{AAj{{AGh{ce}}}}}{}{}}{{{AFf{ce}}}{{AAj{e}}}{}{}}{{{AGh{ce}}}{{AAj{e}}}{}{}}0{{{AFf{ce}}c}Lf{}AGj}{{{AFf{ce}}e}Lf{}{}}{{{AFf{ce}}c}Lf{}{}}{{{AGb{ce}}}{{ACn{AAd{AAj{AAd}}}}}{}{}}{{{AGl{ce}}}{{ACn{AAd{AAj{AAd}}}}}{}{}}{{{AGd{ce}}}{{ACn{AAd{AAj{AAd}}}}}{}{}}{{{AGf{c}}}{{ACn{AAd{AAj{AAd}}}}}{}}{{{AAn{c}}}{{ACn{AAd{AAj{AAd}}}}}{}}{{{AB`{c}}}{{ACn{AAd{AAj{AAd}}}}}{}}{cABb{}}0{ce{}{}}00000{{{AFf{ce}}AC`}LfAFdAFd}{{{AGh{ce}}AC`}LfAFdAFd}{{{AFf{ce}}}Lj{}{}}{c{{Md{e}}}{}{}}000000000000000{cADb{}}0000000{{{AGh{ce}}}c{}{}}0`{AH`ABb}````````````````````````````````````````````````````````````````````````````````````````````````````````77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777{AHbAHb}{NbNb}{AHdAHd}{AHfAHf}{AHhAHh}{AHjAHj}{AHlAHl}{AHnAHn}{AI`AI`}{AIbAIb}{AIdAId}{AIfAIf}{MjMj}{AIhAIh}{AIjAIj}{AIlAIl}{AInAIn}{AJ`AJ`}{MnMn}{AJbAJb}{AJdAJd}{AJfAJf}{AJhAJh}{AJjAJj}{AJlAJl}{AJnAJn}{AK`AK`}{AKbAKb}{AKdAKd}{AKfAKf}{AKhAKh}{AKjAKj}{AKlAKl}{AKnAKn}{AL`AL`}{ALbALb}{ALdALd}{MhMh}{MlMl}{ALfALf}{ALhALh}{N`N`}{ALjALj}{ALlALl}{ALnALn}{AM`AM`}{AMbAMb}{AMdAMd}{AMfAMf}{AMhAMh}{AMjAMj}{AMlAMl}{AMnAMn}{AN`AN`}{ANbANb}{ANdANd}{ANfANf}{ANhANh}{ANjANj}{ANlANl}{ANnANn}{AO`AO`}{AObAOb}{AOdAOd}{AOfAOf}{AOhAOh}{AOjAOj}{AOlAOl}{AOnAOn}{B`B`}{BbBb}{BdBd}{BfBf}{BhBh}{BjBj}{BlBl}{BnBn}{BA`BA`}{BAbBAb}{BAdBAd}{BAfBAf}{BAhBAh}{BAjBAj}{BAlBAl}{BAnBAn}{BB`BB`}{BBbBBb}{BBdBBd}{BBfBBf}{BBhBBh}{BBjBBj}{BBlBBl}{BBnBBn}{BC`BC`}{BCbBCb}{BCdBCd}{BCfBCf}{BChBCh}{BCjBCj}{BClBCl}{BCnBCn}{BD`BD`}{BDbBDb}{{ce}Lf{}{}}000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{{}AHb}{{}Nb}{{}AHd}{{}AHf}{{}AHh}{{}AHj}{{}AHl}{{}AHn}{{}AI`}{{}AIb}{{}AId}{{}AIf}{{}Mj}{{}AIh}{{}AIj}{{}AIl}{{}AIn}{{}AJ`}{{}Mn}{{}AJb}{{}AJd}{{}AJf}{{}AJh}{{}AJj}{{}AJl}{{}AJn}{{}AK`}{{}AKb}{{}AKd}{{}AKf}{{}AKh}{{}AKj}{{}AKl}{{}AKn}{{}AL`}{{}ALb}{{}ALd}{{}Mh}{{}Ml}{{}ALf}{{}ALh}{{}N`}{{}ALj}{{}ALl}{{}ALn}{{}AM`}{{}AMb}{{}AMd}{{}AMf}{{}AMh}{{}AMj}{{}AMl}{{}AMn}{{}AN`}{{}ANb}{{}ANd}{{}ANf}{{}ANh}{{}ANj}{{}ANl}{{}ANn}{{}AO`}{{}AOb}{{}AOd}{{}AOf}{{}AOh}{{}AOj}{{}AOl}{{}AOn}{{}B`}{{}Bb}{{}Bd}{{}Bf}{{}Bh}{{}Bj}{{}Bl}{{}Bn}{{}BA`}{{}BAb}{{}BAd}{{}BAf}{{}BAh}{{}BAj}{{}BAl}{{}BAn}{{}BB`}{{}BBb}{{}BBd}{{}BBf}{{}BBh}{{}BBj}{{}BBl}{{}BBn}{{}BC`}{{}BCb}{{}BCd}{{}BCf}{{}BCh}{{}BCj}{{}BCl}{{}BCn}{{}BD`}{{}BDb}{Nbc{}}{ANbc{}}{ANhc{}}{ANjc{}}{ANnc{}}{AO`c{}}{AObc{}}{AOdc{}}{AOlc{}}{Bdc{}}{Bjc{}}{Blc{}}{BAbc{}}{BAdc{}}{BAlc{}}{BB`c{}}{BBdc{}}{BBfc{}}{BBjc{}}{BCdc{}}{BChc{}}{BClc{}}{Nbc{}}{ANbc{}}{ANhc{}}{ANjc{}}{ANnc{}}{AO`c{}}{AObc{}}{AOdc{}}{AOlc{}}{Bdc{}}{Bjc{}}{Blc{}}{BAbc{}}{BAdc{}}{BAlc{}}{BB`c{}}{BBdc{}}{BBfc{}}{BBjc{}}{BCdc{}}{BChc{}}{BClc{}}{cc{}}000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{ce{}{}}000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{ABn{{l{Nb}}}}{ABn{{l{AHd}}}}{ABn{{l{AHf}}}}{ABn{{l{AHh}}}}{ABn{{l{AHj}}}}{ABn{{l{AHl}}}}{ABn{{l{AHn}}}}{ABn{{l{AI`}}}}{ABn{{l{AIb}}}}{ABn{{l{AId}}}}{ABn{{l{AIf}}}}{ABn{{l{Mj}}}}{ABn{{l{AIh}}}}{ABn{{l{AIj}}}}{ABn{{l{AIl}}}}{ABn{{l{AIn}}}}{ABn{{l{AJ`}}}}{ABn{{l{Mn}}}}{ABn{{l{AJb}}}}{ABn{{l{AJd}}}}{ABn{{l{AJf}}}}{ABn{{l{AJh}}}}{ABn{{l{AJj}}}}{ABn{{l{AJl}}}}{ABn{{l{AJn}}}}{ABn{{l{AK`}}}}{ABn{{l{AKb}}}}{ABn{{l{AKd}}}}{ABn{{l{AKf}}}}{ABn{{l{AKh}}}}{ABn{{l{AKj}}}}{ABn{{l{AKl}}}}{ABn{{l{AKn}}}}{ABn{{l{AL`}}}}{ABn{{l{ALb}}}}{ABn{{l{ALd}}}}{ABn{{l{Mh}}}}{ABn{{l{Ml}}}}{ABn{{l{ALf}}}}{ABn{{l{ALh}}}}{ABn{{l{N`}}}}{ABn{{l{ALj}}}}{ABn{{l{ALl}}}}{ABn{{l{ALn}}}}{ABn{{l{AM`}}}}{ABn{{l{AMb}}}}{ABn{{l{AMd}}}}{ABn{{l{AMf}}}}{ABn{{l{AMh}}}}{ABn{{l{AMj}}}}{ABn{{l{AMl}}}}{ABn{{l{AMn}}}}{ABn{{l{AN`}}}}{ABn{{l{ANb}}}}{ABn{{l{ANd}}}}{ABn{{l{ANf}}}}{ABn{{l{ANh}}}}{ABn{{l{ANj}}}}{ABn{{l{ANl}}}}{ABn{{l{ANn}}}}{ABn{{l{AO`}}}}{ABn{{l{AOb}}}}{ABn{{l{AOd}}}}{ABn{{l{AOf}}}}{ABn{{l{AOh}}}}{ABn{{l{AOj}}}}{ABn{{l{AOl}}}}{ABn{{l{AOn}}}}{ABn{{l{B`}}}}{ABn{{l{Bb}}}}{ABn{{l{Bd}}}}{ABn{{l{Bf}}}}{ABn{{l{Bh}}}}{ABn{{l{Bj}}}}{ABn{{l{Bl}}}}{ABn{{l{Bn}}}}{ABn{{l{BA`}}}}{ABn{{l{BAb}}}}{ABn{{l{BAd}}}}{ABn{{l{BAf}}}}{ABn{{l{BAh}}}}{ABn{{l{BAj}}}}{ABn{{l{BAl}}}}{ABn{{l{BAn}}}}{ABn{{l{BB`}}}}{ABn{{l{BBb}}}}{ABn{{l{BBd}}}}{ABn{{l{BBf}}}}{ABn{{l{BBh}}}}{ABn{{l{BBj}}}}{ABn{{l{BBl}}}}{ABn{{l{BBn}}}}{ABn{{l{BC`}}}}{ABn{{l{BCb}}}}{ABn{{l{BCd}}}}{ABn{{l{BCf}}}}{ABn{{l{BCh}}}}{ABn{{l{BCj}}}}{ABn{{l{BCl}}}}{cABb{}}00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000```````````````````````````````````````````````````````````````````````````````````````````````````````{{AHbAC`c}Lf{{AFj{AC`}}}}{{BCnAC`c}Lf{{AFj{AC`}}}}{{BD`AC`c}Lf{{AFj{AC`}}}}{{BDbAC`c}Lf{{AFj{AC`}}}}{ce{}{}}000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{{NbAC`}Lf}{{AHdAC`}Lf}{{AHfAC`}Lf}{{AHhAC`}Lf}{{AHjAC`}Lf}{{AHlAC`}Lf}{{AHnAC`}Lf}{{AI`AC`}Lf}{{AIbAC`}Lf}{{AIdAC`}Lf}{{AIfAC`}Lf}{{MjAC`}Lf}{{AIhAC`}Lf}{{AIjAC`}Lf}{{AIlAC`}Lf}{{AInAC`}Lf}{{AJ`AC`}Lf}{{MnAC`}Lf}{{AJbAC`}Lf}{{AJdAC`}Lf}{{AJfAC`}Lf}{{AJhAC`}Lf}{{AJjAC`}Lf}{{AJlAC`}Lf}{{AJnAC`}Lf}{{AK`AC`}Lf}{{AKbAC`}Lf}{{AKdAC`}Lf}{{AKfAC`}Lf}{{AKhAC`}Lf}{{AKjAC`}Lf}{{AKlAC`}Lf}{{AKnAC`}Lf}{{AL`AC`}Lf}{{ALbAC`}Lf}{{ALdAC`}Lf}{{MhAC`}Lf}{{MlAC`}Lf}{{ALfAC`}Lf}{{ALhAC`}Lf}{{N`AC`}Lf}{{ALjAC`}Lf}{{ALlAC`}Lf}{{ALnAC`}Lf}{{AM`AC`}Lf}{{AMbAC`}Lf}{{AMdAC`}Lf}{{AMfAC`}Lf}{{AMhAC`}Lf}{{AMjAC`}Lf}{{AMlAC`}Lf}{{AMnAC`}Lf}{{AN`AC`}Lf}{{ANbAC`}Lf}{{ANdAC`}Lf}{{ANfAC`}Lf}{{ANhAC`}Lf}{{ANjAC`}Lf}{{ANlAC`}Lf}{{ANnAC`}Lf}{{AO`AC`}Lf}{{AObAC`}Lf}{{AOdAC`}Lf}{{AOfAC`}Lf}{{AOhAC`}Lf}{{AOjAC`}Lf}{{AOlAC`}Lf}{{AOnAC`}Lf}{{B`AC`}Lf}{{BbAC`}Lf}{{BdAC`}Lf}{{BfAC`}Lf}{{BhAC`}Lf}{{BjAC`}Lf}{{BlAC`}Lf}{{BnAC`}Lf}{{BA`AC`}Lf}{{BAbAC`}Lf}{{BAdAC`}Lf}{{BAfAC`}Lf}{{BAhAC`}Lf}{{BAjAC`}Lf}{{BAlAC`}Lf}{{BAnAC`}Lf}{{BB`AC`}Lf}{{BBbAC`}Lf}{{BBdAC`}Lf}{{BBfAC`}Lf}{{BBhAC`}Lf}{{BBjAC`}Lf}{{BBlAC`}Lf}{{BBnAC`}Lf}{{BC`AC`}Lf}{{BCbAC`}Lf}{{BCdAC`}Lf}{{BCfAC`}Lf}{{BChAC`}Lf}{{BCjAC`}Lf}{{BClAC`}Lf}{c{{Md{e}}}{}{}}0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{cADb{}}000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","c":[],"p":[[5,"TypeGenerics",0],[5,"Turbofish",0],[5,"LitInt",0],[1,"str"],[5,"LitFloat",0],[8,"Result",2173],[10,"FromStr",4127],[5,"Ident",0],[5,"ImplGenerics",0],[5,"Lifetime",0],[5,"Attribute",0],[6,"AttrStyle",0],[6,"Meta",0],[5,"MetaList",0],[5,"MetaNameValue",0],[5,"Variant",0],[6,"Fields",0],[5,"FieldsNamed",0],[5,"FieldsUnnamed",0],[5,"Field",0],[5,"DeriveInput",0],[6,"Data",0],[5,"DataStruct",0],[5,"DataEnum",0],[5,"DataUnion",0],[6,"Expr",0],[5,"ExprBinary",0],[5,"ExprCall",0],[5,"ExprCast",0],[5,"ExprField",0],[5,"ExprGroup",0],[5,"ExprIndex",0],[5,"ExprLit",0],[5,"ExprMacro",0],[5,"ExprMethodCall",0],[5,"ExprParen",0],[5,"ExprPath",0],[5,"ExprReference",0],[5,"ExprStruct",0],[5,"ExprUnary",0],[6,"Member",0],[5,"Index",0],[5,"FieldValue",0],[5,"Generics",0],[6,"GenericParam",0],[5,"LifetimeParam",0],[5,"TypeParam",0],[5,"ConstParam",0],[5,"BoundLifetimes",0],[6,"TypeParamBound",0],[5,"TraitBound",0],[6,"TraitBoundModifier",0],[5,"WhereClause",0],[6,"WherePredicate",0],[5,"PredicateLifetime",0],[5,"PredicateType",0],[6,"Lit",0],[5,"LitStr",0],[5,"LitByteStr",0],[5,"LitByte",0],[5,"LitChar",0],[5,"LitBool",0],[5,"Macro",0],[6,"MacroDelimiter",0],[6,"BinOp",0],[6,"UnOp",0],[5,"Path",0],[5,"PathSegment",0],[6,"PathArguments",0],[6,"GenericArgument",0],[5,"AngleBracketedGenericArguments",0],[5,"AssocType",0],[5,"AssocConst",0],[5,"Constraint",0],[5,"ParenthesizedGenericArguments",0],[5,"QSelf",0],[6,"Visibility",0],[5,"VisRestricted",0],[6,"FieldMutability",0],[6,"Type",0],[5,"TypeArray",0],[5,"TypeBareFn",0],[5,"TypeGroup",0],[5,"TypeImplTrait",0],[5,"TypeInfer",0],[5,"TypeMacro",0],[5,"TypeNever",0],[5,"TypeParen",0],[5,"TypePath",0],[5,"TypePtr",0],[5,"TypeReference",0],[5,"TypeSlice",0],[5,"TypeTraitObject",0],[5,"TypeTuple",0],[5,"Abi",0],[5,"BareFnArg",0],[5,"BareVariadic",0],[6,"ReturnType",0],[1,"unit"],[6,"Ordering",4128],[1,"bool"],[10,"AsRef",4129],[10,"Sized",4130],[5,"Formatter",4131],[5,"Error",4131],[6,"Result",4132],[8,"Result",4131],[5,"SelfType",2442],[5,"Crate",2442],[5,"SelfValue",2442],[5,"Extern",2442],[5,"Super",2442],[5,"Underscore",2442],[5,"ExprBreak",0],[5,"ExprWhile",0],[5,"ExprAwait",0],[5,"ExprAsync",0],[5,"ExprTry",0],[5,"ExprArray",0],[5,"ExprRepeat",0],[5,"ExprAssign",0],[5,"ExprContinue",0],[5,"ExprTuple",0],[5,"ExprYield",0],[5,"ExprForLoop",0],[5,"ExprMatch",0],[5,"ExprReturn",0],[5,"ExprTryBlock",0],[5,"ExprUnsafe",0],[5,"ExprIf",0],[5,"ExprBlock",0],[5,"ExprClosure",0],[5,"ExprLet",0],[5,"ExprInfer",0],[5,"ExprLoop",0],[5,"ExprRange",0],[5,"ExprConst",0],[1,"usize"],[5,"Literal",4133],[10,"Into",4129],[6,"Option",4134],[10,"Hasher",4135],[5,"Iter",2278],[5,"IterMut",2278],[5,"Span",4133],[1,"u8"],[1,"slice"],[1,"char"],[5,"TokenStream",4136],[10,"Parse",2173],[8,"ParseStream",2173],[5,"TokenStream",4133],[10,"Parser",2173],[5,"Vec",4137],[5,"ParseNestedMeta",2159],[17,"Output"],[10,"FnMut",4138],[5,"DelimSpan",4139],[1,"tuple"],[5,"String",4140],[5,"TypeId",4141],[5,"TokenBuffer",2121],[5,"Cursor",2121],[6,"Delimiter",4133],[5,"Punct",4133],[6,"TokenTree",4133],[10,"IdentExt",2155],[5,"Error",2173],[10,"Display",4131],[5,"ParseBuffer",2173],[1,"fn"],[5,"StepCursor",2173],[5,"Nothing",2173],[5,"Lookahead1",2173],[17,"Item"],[10,"IntoIterator",4142],[5,"LexError",4133],[10,"ToTokens",4143],[5,"Punctuated",2278],[10,"Peek",2173],[10,"FnOnce",4138],[10,"Speculative",2274],[10,"AnyDelimiter",2274],[10,"Clone",4144],[5,"Pairs",2278],[5,"IntoPairs",2278],[5,"IntoIter",2278],[6,"Pair",2278],[10,"Default",4145],[5,"PairsMut",2278],[10,"Token",2442],[10,"Spanned",2440],[5,"Group",2442],[5,"Abstract",2442],[5,"As",2442],[5,"Async",2442],[5,"Auto",2442],[5,"Await",2442],[5,"Become",2442],[5,"Box",2442],[5,"Break",2442],[5,"Const",2442],[5,"Continue",2442],[5,"Default",2442],[5,"Do",2442],[5,"Dyn",2442],[5,"Else",2442],[5,"Enum",2442],[5,"Final",2442],[5,"Fn",2442],[5,"For",2442],[5,"If",2442],[5,"Impl",2442],[5,"In",2442],[5,"Let",2442],[5,"Loop",2442],[5,"Macro",2442],[5,"Match",2442],[5,"Mod",2442],[5,"Move",2442],[5,"Mut",2442],[5,"Override",2442],[5,"Priv",2442],[5,"Pub",2442],[5,"Ref",2442],[5,"Return",2442],[5,"Static",2442],[5,"Struct",2442],[5,"Trait",2442],[5,"Try",2442],[5,"Type",2442],[5,"Typeof",2442],[5,"Union",2442],[5,"Unsafe",2442],[5,"Unsized",2442],[5,"Use",2442],[5,"Virtual",2442],[5,"Where",2442],[5,"While",2442],[5,"Yield",2442],[5,"And",2442],[5,"AndAnd",2442],[5,"AndEq",2442],[5,"At",2442],[5,"Caret",2442],[5,"CaretEq",2442],[5,"Colon",2442],[5,"Comma",2442],[5,"Dollar",2442],[5,"Dot",2442],[5,"DotDot",2442],[5,"DotDotDot",2442],[5,"DotDotEq",2442],[5,"Eq",2442],[5,"EqEq",2442],[5,"FatArrow",2442],[5,"Ge",2442],[5,"Gt",2442],[5,"LArrow",2442],[5,"Le",2442],[5,"Lt",2442],[5,"Minus",2442],[5,"MinusEq",2442],[5,"Ne",2442],[5,"Not",2442],[5,"Or",2442],[5,"OrEq",2442],[5,"OrOr",2442],[5,"PathSep",2442],[5,"Percent",2442],[5,"PercentEq",2442],[5,"Plus",2442],[5,"PlusEq",2442],[5,"Pound",2442],[5,"Question",2442],[5,"RArrow",2442],[5,"Semi",2442],[5,"Shl",2442],[5,"ShlEq",2442],[5,"Shr",2442],[5,"ShrEq",2442],[5,"Slash",2442],[5,"SlashEq",2442],[5,"Star",2442],[5,"StarEq",2442],[5,"Tilde",2442],[5,"Brace",2442],[5,"Bracket",2442],[5,"Paren",2442]],"b":[[785,"impl-PartialEq-for-Ident"],[786,"impl-PartialEq%3CT%3E-for-Ident"],[808,"impl-Display-for-Ident"],[809,"impl-IdentFragment-for-Ident"],[810,"impl-Debug-for-Ident"],[818,"impl-From%3CSelfType%3E-for-Ident"],[819,"impl-From%3CCrate%3E-for-Ident"],[820,"impl-From%3CSelfValue%3E-for-Ident"],[821,"impl-From%3CExtern%3E-for-Ident"],[822,"impl-From%3CSuper%3E-for-Ident"],[824,"impl-From%3CUnderscore%3E-for-Ident"],[832,"impl-From%3CPath%3E-for-Meta"],[833,"impl-From%3CMetaList%3E-for-Meta"],[834,"impl-From%3CMetaNameValue%3E-for-Meta"],[838,"impl-From%3CFieldsUnnamed%3E-for-Fields"],[840,"impl-From%3CFieldsNamed%3E-for-Fields"],[849,"impl-From%3CExprField%3E-for-Expr"],[850,"impl-From%3CExprBreak%3E-for-Expr"],[851,"impl-From%3CExprReference%3E-for-Expr"],[852,"impl-From%3CExprWhile%3E-for-Expr"],[853,"impl-From%3CExprCall%3E-for-Expr"],[854,"impl-From%3CExprAwait%3E-for-Expr"],[856,"impl-From%3CExprCast%3E-for-Expr"],[857,"impl-From%3CExprAsync%3E-for-Expr"],[858,"impl-From%3CExprPath%3E-for-Expr"],[859,"impl-From%3CExprUnary%3E-for-Expr"],[860,"impl-From%3CExprTry%3E-for-Expr"],[861,"impl-From%3CExprMacro%3E-for-Expr"],[862,"impl-From%3CExprArray%3E-for-Expr"],[863,"impl-From%3CExprRepeat%3E-for-Expr"],[864,"impl-From%3CExprAssign%3E-for-Expr"],[865,"impl-From%3CExprContinue%3E-for-Expr"],[866,"impl-From%3CExprTuple%3E-for-Expr"],[867,"impl-From%3CExprMethodCall%3E-for-Expr"],[868,"impl-From%3CExprYield%3E-for-Expr"],[869,"impl-From%3CExprStruct%3E-for-Expr"],[870,"impl-From%3CExprForLoop%3E-for-Expr"],[871,"impl-From%3CExprBinary%3E-for-Expr"],[872,"impl-From%3CExprMatch%3E-for-Expr"],[873,"impl-From%3CExprReturn%3E-for-Expr"],[874,"impl-From%3CExprTryBlock%3E-for-Expr"],[875,"impl-From%3CExprUnsafe%3E-for-Expr"],[876,"impl-From%3CExprGroup%3E-for-Expr"],[877,"impl-From%3CExprLit%3E-for-Expr"],[878,"impl-From%3CExprIf%3E-for-Expr"],[879,"impl-From%3CExprBlock%3E-for-Expr"],[880,"impl-From%3CExprParen%3E-for-Expr"],[881,"impl-From%3CExprClosure%3E-for-Expr"],[882,"impl-From%3CExprLet%3E-for-Expr"],[883,"impl-From%3CExprInfer%3E-for-Expr"],[884,"impl-From%3CExprLoop%3E-for-Expr"],[885,"impl-From%3CExprRange%3E-for-Expr"],[886,"impl-From%3CExprConst%3E-for-Expr"],[887,"impl-From%3CExprIndex%3E-for-Expr"],[927,"impl-From%3Cusize%3E-for-Member"],[928,"impl-From%3CIndex%3E-for-Member"],[929,"impl-From%3CIdent%3E-for-Member"],[934,"impl-From%3CConstParam%3E-for-GenericParam"],[935,"impl-From%3CLifetimeParam%3E-for-GenericParam"],[937,"impl-From%3CTypeParam%3E-for-GenericParam"],[944,"impl-From%3CLifetime%3E-for-TypeParamBound"],[945,"impl-From%3CTraitBound%3E-for-TypeParamBound"],[949,"impl-From%3CPredicateLifetime%3E-for-WherePredicate"],[950,"impl-From%3CPredicateType%3E-for-WherePredicate"],[954,"impl-From%3CLitByteStr%3E-for-Lit"],[955,"impl-From%3CLitByte%3E-for-Lit"],[956,"impl-From%3CLitChar%3E-for-Lit"],[957,"impl-From%3CLitStr%3E-for-Lit"],[959,"impl-From%3CLitFloat%3E-for-Lit"],[960,"impl-From%3CLitInt%3E-for-Lit"],[961,"impl-From%3CLitBool%3E-for-Lit"],[990,"impl-From%3CTypeBareFn%3E-for-Type"],[991,"impl-From%3CTypeReference%3E-for-Type"],[993,"impl-From%3CTypeImplTrait%3E-for-Type"],[994,"impl-From%3CTypeNever%3E-for-Type"],[995,"impl-From%3CTypePtr%3E-for-Type"],[996,"impl-From%3CTypeGroup%3E-for-Type"],[997,"impl-From%3CTypeArray%3E-for-Type"],[998,"impl-From%3CTypeMacro%3E-for-Type"],[999,"impl-From%3CTypeTuple%3E-for-Type"],[1000,"impl-From%3CTypeInfer%3E-for-Type"],[1001,"impl-From%3CTypePath%3E-for-Type"],[1002,"impl-From%3CTypeParen%3E-for-Type"],[1003,"impl-From%3CTypeSlice%3E-for-Type"],[1004,"impl-From%3CTypeTraitObject%3E-for-Type"],[1174,"impl-IntoIterator-for-Fields"],[1175,"impl-IntoIterator-for-%26mut+Fields"],[1176,"impl-IntoIterator-for-%26Fields"],[1277,"impl-Parse-for-LitStr"],[1278,"impl-LitStr"],[1372,"impl-IdentFragment-for-Ident"],[1373,"impl-Ident"],[2213,"impl-Display-for-Error"],[2214,"impl-Debug-for-Error"],[2215,"impl-Display-for-ParseBuffer%3C\'a%3E"],[2216,"impl-Debug-for-ParseBuffer%3C\'a%3E"],[2230,"impl-IntoIterator-for-Error"],[2231,"impl-IntoIterator-for-%26Error"],[2321,"impl-Extend%3CT%3E-for-Punctuated%3CT,+P%3E"],[2322,"impl-Extend%3CPair%3CT,+P%3E%3E-for-Punctuated%3CT,+P%3E"],[2333,"impl-FromIterator%3CPair%3CT,+P%3E%3E-for-Punctuated%3CT,+P%3E"],[2334,"impl-FromIterator%3CT%3E-for-Punctuated%3CT,+P%3E"],[2346,"impl-IntoIterator-for-%26mut+Punctuated%3CT,+P%3E"],[2347,"impl-IntoIterator-for-%26Punctuated%3CT,+P%3E"],[2348,"impl-IntoIterator-for-Punctuated%3CT,+P%3E"]]}],\
["unicode_ident",{"doc":"github crates-io docs-rs","t":"HH","n":["is_xid_continue","is_xid_start"],"q":[[0,"unicode_ident"]],"d":["",""],"i":[0,0],"f":"{bd}0","c":[],"p":[[1,"char"],[1,"bool"]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
