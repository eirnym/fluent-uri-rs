var searchIndex = new Map(JSON.parse('[\
["fluent_uri",{"doc":"An RFC 3986 compliant generic URI parser and builder.","t":"FFFNNNNNNNNNNNNNNNNNNNNCNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFGPPPPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOPGFFPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNKFFFFFTFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSSSSSSSSSSSSSSFSSNNNNNNNNNNNNNNNNNN","n":["Builder","ParseError","Uri","advance","as_ref","as_str","authority","authority","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","builder","clone","clone","clone_into","clone_into","cmp","component","default","encoding","eq","fmt","fmt","fmt","fmt","fragment","fragment","from","from","from","from","from_str","hash","host","host_port_from_socket_addr","into","into","into","into_input","into_string","is_absolute","is_relative","optional","parse","partial_cmp","path","path","plain","port","query","query","scheme","scheme","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","userinfo","Authority","Host","Ipv4","Ipv6","IpvFuture","RegName","Scheme","as_str","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","host","host_as_str","into","into","new","port","to_owned","to_socket_addrs","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","type_id","userinfo","addr","zone_id","Borrowed","Decode","EStr","EString","Owned","Split","as_bytes","as_estr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","decode","default","default","deref","encode","encode_byte","encode_with","encoder","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","into","into","into","into_bytes","into_iter","into_string","into_string","into_string_lossy","is_absolute","is_empty","is_rootless","len","new","new","next","next_back","partial_cmp","partial_cmp","push_estr","reserve","reserve_exact","segments","shrink_to","shrink_to_fit","split","split_once","table","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_capacity","Encoder","Fragment","Path","PathSegment","Query","RegName","TABLE","Userinfo","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","from","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","ALPHA","DIGIT","FRAGMENT","GEN_DELIMS","HEXDIG","IPV_FUTURE","PATH","PCHAR","QUERY","REG_NAME","RESERVED","SCHEME","SEGMENT_NC","SUB_DELIMS","Table","UNRESERVED","USERINFO","allows","allows_enc","borrow","borrow_mut","clone","clone_into","enc","fmt","from","gen","into","is_subset","or","sub","to_owned","try_from","try_into","type_id"],"q":[[0,"fluent_uri"],[74,"fluent_uri::component"],[119,"fluent_uri::component::Host"],[121,"fluent_uri::encoding"],[229,"fluent_uri::encoding::encoder"],[279,"fluent_uri::encoding::table"],[314,"core::ops::function"],[315,"core::option"],[316,"alloc::string"],[317,"core::clone"],[318,"core::cmp"],[319,"core::default"],[320,"core::fmt"],[321,"core::fmt"],[322,"core::hash"],[323,"core::net::socket_addr"],[324,"core::convert"],[325,"core::any"],[326,"core::iter::traits::iterator"],[327,"std::io::error"],[328,"core::convert"],[329,"core::fmt"],[330,"alloc::string"]],"d":["A builder for URI reference.","An error occurred when parsing URI references.","A URI reference defined in RFC 3986.","Advances the builder state, skipping optional components …","","Returns the URI reference as a string slice.","Builds the authority component with the given function.","Returns the authority component.","","","Borrows this <code>Uri&lt;String&gt;</code> as <code>Uri&lt;&amp;str&gt;</code>.","","","","","","Builds the URI reference.","Creates a new builder for URI reference.","","","","","","Components of URI reference.","","Utilities for percent-encoding.","","","","","","Sets the fragment component.","Returns the fragment component.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Sets the host subcomponent of authority.","Sets the host and the port subcomponent of authority to …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Recovers the input that were attempted to parse into a <code>Uri</code>.","Consumes this <code>Uri&lt;String&gt;</code> and yields the underlying <code>String</code> …","Returns <code>true</code> if the URI reference is absolute, i.e., with …","Returns <code>true</code> if the URI reference is relative, i.e., …","Optionally calls a builder method with a value.","Parses a URI reference from a string into a <code>Uri</code>.","","Sets the path component.","Returns the path component.","Returns the error with input erased.","Sets the port subcomponent of authority.","Sets the query component.","Returns the query component.","Sets the scheme component.","Returns the scheme component.","","Creates a new <code>Uri&lt;String&gt;</code> by cloning the contents of this …","","","","","","","","","","","","","Sets the userinfo subcomponent of authority.","The authority component of URI reference.","The host component of URI reference.","An IPv4 address.","An IPv6 host.","An IP address of future version.","A registered name.","The scheme component of URI reference.","Returns the scheme as a string slice.","Returns the authority as a string slice.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the parsed host subcomponent.","Returns the host subcomponent as a string slice.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts a string slice to <code>&amp;Scheme</code>.","Returns the port subcomponent.","","Converts this authority to an iterator of resolved …","","","","","","","","","","Returns the userinfo subcomponent.","The address.","An optional zone identifier.","No percent-encoded octets are decoded.","A wrapper of percent-decoded bytes.","Percent-encoded string slices.","A percent-encoded, growable string.","One or more percent-encoded octets are decoded.","An iterator over subslices of an <code>EStr</code> separated by a …","Returns a reference to the decoded bytes.","Coerces to an <code>EStr</code> slice.","","","","","","","Yields the underlying string slice.","","","","","","","","","","Invokes <code>capacity</code> on the underlying <code>String</code>.","Invokes <code>clear</code> on the underlying <code>String</code>.","","","","","","","","","","Decodes the <code>EStr</code> slice.","","Creates an empty <code>EStr</code> slice.","","Encodes a byte sequence and appends the result onto the …","Encodes a byte and appends the result onto the end of this …","Encodes a byte sequence with a sub-encoder and appends the …","Percent-encoders for URI components.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>Decode</code> and yields the underlying decoded …","","Consumes this <code>EString</code> and yields the underlying <code>String</code> …","Converts the decoded bytes to a string.","Converts the decoded bytes to a string, including invalid …","Returns <code>true</code> if the path is absolute, i.e., beginning with …","Invokes <code>is_empty</code> on the underlying <code>String</code>.","Returns <code>true</code> if the path is rootless, i.e., not beginning …","Invokes <code>len</code> on the underlying <code>String</code>.","Creates a new empty <code>EString</code>.","Converts a string slice to an <code>EStr</code> slice.","","","","","Appends an <code>EStr</code> slice onto the end of this <code>EString</code>.","Invokes <code>reserve</code> on the underlying <code>String</code>.","Invokes <code>reserve_exact</code> on the underlying <code>String</code>.","Returns an iterator over the path segments.","Invokes <code>shrink_to</code> on the underlying <code>String</code>.","Invokes <code>shrink_to_fit</code> on the underlying <code>String</code>.","Returns an iterator over subslices of the <code>EStr</code> slice …","Splits the <code>EStr</code> slice on the first occurrence of the given …","Byte pattern tables from RFC 3986.","","","","","","","","","","","","","","","","","Creates a new empty <code>EString</code> with a particular capacity.","A trait used by <code>EStr</code> and <code>EString</code> to specify the table used …","An encoder for fragment.","An encoder for path.","An encoder for path segment.","An encoder for query.","An encoder for registered name.","The table used for encoding.","An encoder for userinfo.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","ALPHA = A-Z / a-z","DIGIT = 0-9","fragment = *( pchar / “/” / “?” )","gen-delims = “:” / “/” / “?” / “#” / “[…","HEXDIG = DIGIT / “A” / “B” / “C” / “D” / …","IPvFuture = “v” 1*HEXDIG “.” 1*( unreserved / …","path = *( pchar / “/” )","pchar = unreserved / pct-encoded / sub-delims / “:” / …","query = *( pchar / “/” / “?” )","reg-name = *( unreserved / pct-encoded / sub-delims )","reserved = gen-delims / sub-delims","scheme = ALPHA *( ALPHA / DIGIT / “+” / “-” / “.…","segment-nz-nc = 1*( unreserved / pct-encoded / sub-delims …","sub-delims = “!” / “$” / “&amp;” / “’” / “(…","A table determining the byte patterns allowed in a string.","unreserved = ALPHA / DIGIT / “-” / “.” / “_” / …","userinfo = *( unreserved / pct-encoded / sub-delims / “:…","Returns <code>true</code> if the given unencoded byte is allowed by the …","Returns <code>true</code> if percent-encoded octets are allowed by the …","","","","","Marks this table as allowing percent-encoded octets.","","Returns the argument unchanged.","Generates a table that only allows the given unencoded …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the table is a subset of another, i.e., …","Combines two tables into one.","Subtracts from this table.","","","",""],"i":[0,0,0,1,2,2,1,2,1,9,2,2,2,1,9,2,1,2,9,2,9,2,2,0,2,0,2,9,9,2,2,1,2,1,9,2,2,2,2,1,1,1,9,2,9,2,2,2,1,2,2,1,2,9,1,1,2,1,2,9,2,2,9,2,1,9,2,1,9,2,1,9,2,1,0,0,21,21,21,21,0,28,6,28,6,21,28,6,21,21,21,28,28,21,28,28,6,6,21,6,21,6,6,6,21,28,6,21,6,28,6,6,21,6,21,28,6,21,6,50,50,34,0,0,0,34,0,34,37,37,37,37,18,18,18,18,37,37,18,34,40,37,18,34,40,37,37,37,34,40,37,18,34,40,37,18,18,37,18,37,37,37,37,0,37,37,37,37,37,18,18,18,18,37,37,18,18,34,40,37,37,34,40,37,18,37,34,40,34,40,37,34,34,18,37,18,37,37,18,40,40,37,18,37,37,37,18,37,37,18,18,0,37,18,34,40,37,18,37,34,40,37,34,40,37,18,34,40,37,0,0,0,0,0,0,38,0,30,51,26,46,27,17,30,51,26,46,27,17,30,51,26,46,27,17,30,51,26,46,27,17,30,51,26,46,27,17,30,51,26,46,27,17,30,51,26,46,27,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49],"f":"```{{{b{e}}}{{b{c}}}`{{`{c}}}}{{{d{c}}}f`}0{{{b{c}}g}{{b{`}}}{{`{`}}}{{`{`}}}{{j{{b{`}}}{{h{{b{e}}}}}}}}{{{d{c}}}{{n{{l{c}}}}}`}{ce{}{}}0{{{d{A`}}}{{d{f}}}}14111{{{b{c}}}{{d{A`}}}{{`{`}}}}{{}b}{{{Ab{c}}}{{Ab{c}}}Ad}{{{d{c}}}{{d{c}}}{Ad`}}{{ce}Af{}{}}0{{{d{c}}{d{c}}}Ah`}`{{}{{d{c}}}{Aj`}}`{{{d{c}}{d{e}}}Al``}{{{Ab{c}}An}B`{}}0{{{d{c}}An}B``}0{{{b{c}}{Bd{Bb}}}{{b{`}}}{{`{`}}}}{{{d{c}}}{{n{{Bd{Bb}}}}}`}{cc{}}0{{{d{f}}}{{d{A`}}}}1{f{{Bf{{d{A`}}c}}}{}}{{{d{c}}e}Af`Bh}{{{b{c}}Bj}{{b{`}}}{{`{`}}}}{{{b{c}}eBl}{{b{`}}}{{`{`}}}{{C`{Bn}}}}{ce{}{}}00{{{Ab{A`}}}A`}{{{d{A`}}}A`}{{{d{c}}}Al`}0{{{b{e}}i{n{g}}}{{b{c}}}`{{`{c}}}{}{{j{{b{e}}g}{{h{{b{c}}}}}}}}{e{{Bf{d}}}`{{`{}{{Cb{c}}}}}}{{{d{c}}{d{c}}}{{n{Ah}}}`}{{{b{c}}{Bd{Cd}}}{{b{`}}}{{`{`}}}}{{{d{c}}}{{Bd{Cd}}}`}{{{Ab{A`}}}Ab}{{{b{c}}e}{{b{`}}}{{`{`}}}`}{{{b{c}}{Bd{Cf}}}{{b{`}}}{{`{`}}}}{{{d{c}}}{{n{{Bd{Cf}}}}}`}{{{b{c}}Ch}{{b{`}}}{{`{`}}}}{{{d{c}}}{{n{Ch}}}`}>{{{d{f}}}{{d{A`}}}}?{cA`{}}0{c{{Bf{e}}}{}{}}00000{cCj{}}00{{{b{c}}{Bd{Cl}}}{{b{`}}}{{`{`}}}}```````{Chf}{{{l{c}}}f`}{ce{}{}}00000{BjBj}{{ce}Af{}{}}{{Chf}Al}{{ChCh}Al}{{BjBj}Al}{{ChAn}B`}0{{{l{c}}An}B``}0{{BjAn}B`}{cc{}}0{{{l{c}}}Bj`};::{fCh}{{{l{c}}}{{n{f}}}`}<{{{l{c}}Bl}{{Db{{`{{D`{}{{Cn{Bn}}}}}}}}}`}{cA`{}}0{c{{Bf{e}}}{}{}}000{cCj{}}00{{{l{c}}}{{n{{Bd{Cl}}}}}`}````````{Dd{{Dh{Df}}}}{{{Dj{c}}}{{Bd{c}}}Dl}{{{Dj{c}}}fDl}{{{Dj{c}}}{{Dh{Df}}}Dl}2{{{Bd{c}}}{{Dh{Df}}}Dl}{{{Bd{c}}}{{Bd{c}}}Dl}{{{Bd{c}}}fDl}05{ce{}{}}0000000{{{Dj{c}}}DnDl}{{{Dj{c}}}AfDl}{{{Dj{c}}}{{Dj{c}}}{AdDl}}{DdDd}{{{E`{c}}}{{E`{c}}}{AdDl}}{{ce}Af{}{}}{{{Bd{c}}{Dj{c}}}AfDl}11{{{Dj{c}}{Dj{c}}}AhDl}{{{Bd{c}}{Bd{c}}}AhDl}{{{Bd{c}}}DdDl}{{}{{Dj{c}}}{AjDl}}{{}{{Bd{c}}}Dl}{{{Dj{c}}}{{Bd{c}}}Dl}{{{Dj{c}}e}AfDl{{Eb{{Dh{Df}}}}Ed}}{{{Dj{c}}Df}AfDl}1`{{{Dj{c}}{Bd{e}}}AlDlDl}{{{Dj{c}}{Dj{e}}}AlDlDl}1{{{Dj{c}}f}AlDl}0{{{Bd{c}}f}AlDl}{{{Bd{c}}{Dj{e}}}AlDlDl}{{{Bd{c}}{Bd{e}}}AlDlDl}1{{{Dj{c}}An}B`Dl}0{{{Bd{c}}An}B`Dl}0{{DdAn}B`}{{{E`{c}}An}B`{EfDl}}{{{Bd{c}}}{{Dj{c}}}Dl}{cc{}}00{{{Dj{c}}e}AfDlBh}{{{Bd{c}}e}AfDlBh}{ce{}{}}00{Dd{{Eh{{Dh{Df}}}}}}1{{{Dj{c}}}A`Dl}{Dd{{Bf{{Eh{f}}Ej}}}}{Dd{{Eh{f}}}}{{{Bd{Cd}}}Al}{{{Dj{c}}}AlDl}1{{{Dj{c}}}DnDl}{{}{{Dj{c}}}Dl}{f{{Bd{c}}}Dl}{{{E`{c}}}{{n{{Bd{c}}}}}Dl}0{{{Dj{c}}{Dj{c}}}{{n{Ah}}}Dl}{{{Bd{c}}{Bd{c}}}{{n{Ah}}}Dl}{{{Dj{c}}{Bd{c}}}AfDl}{{{Dj{c}}Dn}AfDl}0{{{Bd{Cd}}}{{E`{El}}}}1{{{Dj{c}}}AfDl}{{{Bd{c}}En}{{E`{c}}}Dl}{{{Bd{c}}En}{{n{{F`{{Bd{c}}{Bd{c}}}}}}}Dl}`{ce{}{}}{{{Bd{c}}}{{Dj{c}}}Dl}11{cA`{}}0{c{{Bf{e}}}{}{}}00000{cCj{}}000{Dn{{Dj{c}}}Dl}````````555555555555{cc{}}00000666666333333333333222222`````````````````{{FbDf}Al}{FbAl}88{FbFb}{{ce}Af{}{}}1{{FbAn}B`}5{{{Dh{Df}}}Fb}<{{FbFb}Al}{{FbFb}Fb}0>;;:","c":[],"p":[[5,"Builder",0],[5,"Uri",0],[1,"str"],[17,"Output"],[10,"FnOnce",314],[5,"Authority",74],[6,"Option",315],[5,"String",316],[5,"ParseError",0],[10,"Clone",317],[1,"unit"],[6,"Ordering",318],[10,"Default",319],[1,"bool"],[5,"Formatter",320],[8,"Result",320],[5,"Fragment",229],[5,"EStr",121],[6,"Result",321],[10,"Hasher",322],[6,"Host",74],[1,"u16"],[6,"SocketAddr",323],[10,"Into",324],[17,"Storage"],[5,"Path",229],[5,"Query",229],[5,"Scheme",74],[5,"TypeId",325],[5,"Userinfo",229],[17,"Item"],[10,"Iterator",326],[8,"Result",327],[6,"Decode",121],[1,"u8"],[1,"slice"],[5,"EString",121],[10,"Encoder",229],[1,"usize"],[5,"Split",121],[10,"AsRef",324],[10,"Sized",328],[10,"Debug",320],[6,"Cow",329],[5,"FromUtf8Error",316],[5,"PathSegment",229],[1,"char"],[1,"tuple"],[5,"Table",279],[15,"Ipv6",119],[5,"RegName",229]],"b":[[10,"impl-Uri%3CString%3E"],[12,"impl-Borrow%3Cstr%3E-for-Uri%3CT%3E"],[27,"impl-Display-for-ParseError%3CI%3E"],[28,"impl-Debug-for-ParseError%3CI%3E"],[29,"impl-Debug-for-Uri%3CT%3E"],[30,"impl-Display-for-Uri%3CT%3E"],[91,"impl-PartialEq%3Cstr%3E-for-Scheme"],[92,"impl-PartialEq-for-Scheme"],[94,"impl-Display-for-Scheme"],[95,"impl-Debug-for-Scheme"],[96,"impl-Debug-for-Authority%3CT%3E"],[97,"impl-Display-for-Authority%3CT%3E"],[129,"impl-AsRef%3Cstr%3E-for-EString%3CE%3E"],[130,"impl-AsRef%3C%5Bu8%5D%3E-for-EString%3CE%3E"],[131,"impl-AsRef%3CEStr%3CE%3E%3E-for-EString%3CE%3E"],[132,"impl-AsRef%3C%5Bu8%5D%3E-for-EStr%3CE%3E"],[133,"impl-AsRef%3CEStr%3CE%3E%3E-for-EStr%3CE%3E"],[134,"impl-AsRef%3Cstr%3E-for-EStr%3CE%3E"],[164,"impl-PartialEq%3CEStr%3CF%3E%3E-for-EString%3CE%3E"],[165,"impl-PartialEq%3CEString%3CF%3E%3E-for-EString%3CE%3E"],[166,"impl-PartialEq%3C%26EStr%3CF%3E%3E-for-EString%3CE%3E"],[167,"impl-PartialEq%3Cstr%3E-for-EString%3CE%3E"],[168,"impl-PartialEq%3C%26str%3E-for-EString%3CE%3E"],[169,"impl-PartialEq%3Cstr%3E-for-EStr%3CE%3E"],[170,"impl-PartialEq%3CEString%3CE%3E%3E-for-EStr%3CF%3E"],[171,"impl-PartialEq%3CEStr%3CF%3E%3E-for-EStr%3CE%3E"],[172,"impl-PartialEq%3CEString%3CE%3E%3E-for-%26EStr%3CF%3E"],[173,"impl-Display-for-EString%3CE%3E"],[174,"impl-Debug-for-EString%3CE%3E"],[175,"impl-Debug-for-EStr%3CE%3E"],[176,"impl-Display-for-EStr%3CE%3E"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
