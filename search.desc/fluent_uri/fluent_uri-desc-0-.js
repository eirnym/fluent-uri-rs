searchState.loadedDescShard("fluent_uri", 0, "A fast, easy generic URI parser and builder compliant with …\nA builder for URI reference.\nAn error occurred when parsing URI references.\nA URI reference defined in RFC 3986.\nAdvances the builder state, skipping optional components …\nReturns the URI reference as a string slice.\nBuilds the authority component with the given function.\nReturns the authority component.\nBorrows this <code>Uri&lt;String&gt;</code> as <code>Uri&lt;&amp;str&gt;</code>.\nBuilds the URI reference.\nCreates a new builder for URI reference.\nComponents of URI reference.\nCreates an empty URI reference.\nUtilities for percent-encoding.\nSets the fragment component.\nReturns the fragment component.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the host subcomponent of authority.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRecovers the input that was attempted to parse into a <code>Uri</code>.\nConsumes this <code>Uri&lt;String&gt;</code> and yields the underlying <code>String</code>.\nChecks whether the URI reference is an absolute URI, i.e., …\nChecks whether the URI reference is a relative reference, …\nOptionally calls a builder method with a value.\nParses a URI reference from a string into a <code>Uri</code>.\nSets the path component.\nReturns the path component.\nReturns the error with input erased.\nSets the port subcomponent of authority.\nSets the query component.\nReturns the query component.\nSets the scheme component.\nReturns the scheme component.\nCreates a new <code>Uri&lt;String&gt;</code> by cloning the contents of this …\nSets the userinfo subcomponent of authority.\nThe authority component of URI reference.\nThe parsed host component of URI reference.\nAn IPv4 address.\nAn IPv6 address.\nAn IP address of future version.\nA registered name.\nThe scheme component of URI reference.\nReturns the scheme as a string slice.\nReturns the authority as a string slice.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the host subcomponent as a string slice.\nReturns the parsed host subcomponent.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a string slice to <code>&amp;Scheme</code>.\nReturns the port subcomponent.\nConverts the port subcomponent to <code>u16</code>.\nConverts the authority to an iterator of resolved …\nConverts a string slice to <code>&amp;Scheme</code>, returning <code>None</code> if the …\nReturns the userinfo subcomponent.\nNo percent-encoded octets are decoded.\nA wrapper of percent-decoded bytes.\nPercent-encoded string slices.\nA percent-encoded, growable string.\nOne or more percent-encoded octets are decoded.\nAn iterator over subslices of an <code>EStr</code> slice separated by a …\nReturns a reference to the decoded bytes.\nCoerces to an <code>EStr</code> slice.\nYields the underlying string slice.\nInvokes <code>capacity</code> on the underlying <code>String</code>.\nTruncates this <code>EString</code> to zero length and casts it to …\nDecodes the <code>EStr</code> slice.\nCreates an empty <code>EStr</code> slice.\nEncodes a byte sequence with a sub-encoder and appends the …\nPercent-encoders for URI components.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>Decode</code> and yields the underlying decoded …\nConsumes this <code>EString</code> and yields the underlying <code>String</code>.\nConverts the decoded bytes to a string.\nConverts the decoded bytes to a string, including invalid …\nChecks whether the path is absolute, i.e., starting with …\nChecks whether the <code>EStr</code> slice is empty.\nChecks whether the path is rootless, i.e., not starting …\nReturns the length of the <code>EStr</code> slice in bytes.\nCreates a new empty <code>EString</code>.\nConverts a string slice to an <code>EStr</code> slice.\nAppends an unencoded byte onto the end of this <code>EString</code>.\nAppends an <code>EStr</code> slice onto the end of this <code>EString</code>.\nInvokes <code>reserve</code> on the underlying <code>String</code>.\nInvokes <code>reserve_exact</code> on the underlying <code>String</code>.\nSplits the <code>EStr</code> slice on the last occurrence of the given …\nReturns an iterator over subslices of the <code>EStr</code> slice …\nSplits the <code>EStr</code> slice on the first occurrence of the given …\nByte pattern tables from RFC 3986.\nConverts a string slice to an <code>EStr</code> slice, returning <code>None</code> …\nCreates a new empty <code>EString</code> with a particular capacity.\nAn encoder for data which preserves only unreserved …\nA trait used by <code>EStr</code> and <code>EString</code> to specify the table used …\nAn encoder for fragment.\nAn encoder for path.\nAn encoder for query.\nAn encoder for registered name.\nThe table used for encoding.\nAn encoder for userinfo.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ALPHA = %x41-5A / %x61-7A</code>\n<code>DIGIT = %x30-39</code>\n<code>fragment = *( pchar / &quot;/&quot; / &quot;?&quot; )</code>\n<code>gen-delims = &quot;:&quot; / &quot;/&quot; / &quot;?&quot; / &quot;#&quot; / &quot;[&quot; / &quot;]&quot; / &quot;@&quot;</code>\n<code>HEXDIG = DIGIT / &quot;A&quot; / &quot;B&quot; / &quot;C&quot; / &quot;D&quot; / &quot;E&quot; / &quot;F&quot;</code>\n…\n<code>path = *( pchar / &quot;/&quot; )</code>\n<code>pchar = unreserved / pct-encoded / sub-delims / &quot;:&quot; / &quot;@&quot;</code>\n<code>query = *( pchar / &quot;/&quot; / &quot;?&quot; )</code>\n<code>reg-name = *( unreserved / pct-encoded / sub-delims )</code>\n<code>reserved = gen-delims / sub-delims</code>\n<code>scheme = ALPHA *( ALPHA / DIGIT / &quot;+&quot; / &quot;-&quot; / &quot;.&quot; )</code>\n…\n…\nA table determining the byte patterns allowed in a string.\n<code>unreserved = ALPHA / DIGIT / &quot;-&quot; / &quot;.&quot; / &quot;_&quot; / &quot;~&quot;</code>\n<code>userinfo = *( unreserved / pct-encoded / sub-delims / &quot;:&quot; )</code>\nChecks whether the given unencoded byte is allowed by the …\nChecks whether percent-encoded octets are allowed by the …\nMarks this table as allowing percent-encoded octets.\nReturns the argument unchanged.\nGenerates a table that only allows the given unencoded …\nCalls <code>U::from(self)</code>.\nChecks whether the table is a subset of another, i.e., …\nCombines two tables into one.\nSubtracts from this table.")